// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	mcp "istio.io/api/mcp/v1alpha1"
	snap "istio.io/istio/pkg/mcp/snapshot"
)

type Builder struct {
	SetStub        func(typeURL string, version string, resources []*mcp.Envelope)
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		typeURL   string
		version   string
		resources []*mcp.Envelope
	}
	BuildStub        func() *snap.InMemory
	buildMutex       sync.RWMutex
	buildArgsForCall []struct{}
	buildReturns     struct {
		result1 *snap.InMemory
	}
	buildReturnsOnCall map[int]struct {
		result1 *snap.InMemory
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Builder) Set(typeURL string, version string, resources []*mcp.Envelope) {
	var resourcesCopy []*mcp.Envelope
	if resources != nil {
		resourcesCopy = make([]*mcp.Envelope, len(resources))
		copy(resourcesCopy, resources)
	}
	fake.setMutex.Lock()
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		typeURL   string
		version   string
		resources []*mcp.Envelope
	}{typeURL, version, resourcesCopy})
	fake.recordInvocation("Set", []interface{}{typeURL, version, resourcesCopy})
	fake.setMutex.Unlock()
	if fake.SetStub != nil {
		fake.SetStub(typeURL, version, resources)
	}
}

func (fake *Builder) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *Builder) SetArgsForCall(i int) (string, string, []*mcp.Envelope) {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return fake.setArgsForCall[i].typeURL, fake.setArgsForCall[i].version, fake.setArgsForCall[i].resources
}

func (fake *Builder) Build() *snap.InMemory {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct{}{})
	fake.recordInvocation("Build", []interface{}{})
	fake.buildMutex.Unlock()
	if fake.BuildStub != nil {
		return fake.BuildStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.buildReturns.result1
}

func (fake *Builder) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *Builder) BuildReturns(result1 *snap.InMemory) {
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 *snap.InMemory
	}{result1}
}

func (fake *Builder) BuildReturnsOnCall(i int, result1 *snap.InMemory) {
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 *snap.InMemory
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 *snap.InMemory
	}{result1}
}

func (fake *Builder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Builder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
