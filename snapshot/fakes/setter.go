// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	snap "istio.io/istio/pkg/mcp/snapshot"
)

type Setter struct {
	SetSnapshotStub        func(node string, istio snap.Snapshot)
	setSnapshotMutex       sync.RWMutex
	setSnapshotArgsForCall []struct {
		node  string
		istio snap.Snapshot
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Setter) SetSnapshot(node string, istio snap.Snapshot) {
	fake.setSnapshotMutex.Lock()
	fake.setSnapshotArgsForCall = append(fake.setSnapshotArgsForCall, struct {
		node  string
		istio snap.Snapshot
	}{node, istio})
	fake.recordInvocation("SetSnapshot", []interface{}{node, istio})
	fake.setSnapshotMutex.Unlock()
	if fake.SetSnapshotStub != nil {
		fake.SetSnapshotStub(node, istio)
	}
}

func (fake *Setter) SetSnapshotCallCount() int {
	fake.setSnapshotMutex.RLock()
	defer fake.setSnapshotMutex.RUnlock()
	return len(fake.setSnapshotArgsForCall)
}

func (fake *Setter) SetSnapshotArgsForCall(i int) (string, snap.Snapshot) {
	fake.setSnapshotMutex.RLock()
	defer fake.setSnapshotMutex.RUnlock()
	return fake.setSnapshotArgsForCall[i].node, fake.setSnapshotArgsForCall[i].istio
}

func (fake *Setter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setSnapshotMutex.RLock()
	defer fake.setSnapshotMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Setter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
