// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/copilot/models"
	"istio.io/api/mcp/v1alpha1"
)

type Config struct {
	CreateDestinationRuleResourcesStub        func([]*models.RouteWithBackends, string) []*v1alpha1.Resource
	createDestinationRuleResourcesMutex       sync.RWMutex
	createDestinationRuleResourcesArgsForCall []struct {
		arg1 []*models.RouteWithBackends
		arg2 string
	}
	createDestinationRuleResourcesReturns struct {
		result1 []*v1alpha1.Resource
	}
	createDestinationRuleResourcesReturnsOnCall map[int]struct {
		result1 []*v1alpha1.Resource
	}
	CreateGatewayResourcesStub        func() []*v1alpha1.Resource
	createGatewayResourcesMutex       sync.RWMutex
	createGatewayResourcesArgsForCall []struct {
	}
	createGatewayResourcesReturns struct {
		result1 []*v1alpha1.Resource
	}
	createGatewayResourcesReturnsOnCall map[int]struct {
		result1 []*v1alpha1.Resource
	}
	CreateServiceEntryResourcesStub        func([]*models.RouteWithBackends, string) []*v1alpha1.Resource
	createServiceEntryResourcesMutex       sync.RWMutex
	createServiceEntryResourcesArgsForCall []struct {
		arg1 []*models.RouteWithBackends
		arg2 string
	}
	createServiceEntryResourcesReturns struct {
		result1 []*v1alpha1.Resource
	}
	createServiceEntryResourcesReturnsOnCall map[int]struct {
		result1 []*v1alpha1.Resource
	}
	CreateSidecarResourcesStub        func() []*v1alpha1.Resource
	createSidecarResourcesMutex       sync.RWMutex
	createSidecarResourcesArgsForCall []struct {
	}
	createSidecarResourcesReturns struct {
		result1 []*v1alpha1.Resource
	}
	createSidecarResourcesReturnsOnCall map[int]struct {
		result1 []*v1alpha1.Resource
	}
	CreateVirtualServiceResourcesStub        func([]*models.RouteWithBackends, string) []*v1alpha1.Resource
	createVirtualServiceResourcesMutex       sync.RWMutex
	createVirtualServiceResourcesArgsForCall []struct {
		arg1 []*models.RouteWithBackends
		arg2 string
	}
	createVirtualServiceResourcesReturns struct {
		result1 []*v1alpha1.Resource
	}
	createVirtualServiceResourcesReturnsOnCall map[int]struct {
		result1 []*v1alpha1.Resource
	}
	EmptyResponseStub        func() []*v1alpha1.Resource
	emptyResponseMutex       sync.RWMutex
	emptyResponseArgsForCall []struct {
	}
	emptyResponseReturns struct {
		result1 []*v1alpha1.Resource
	}
	emptyResponseReturnsOnCall map[int]struct {
		result1 []*v1alpha1.Resource
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Config) CreateDestinationRuleResources(arg1 []*models.RouteWithBackends, arg2 string) []*v1alpha1.Resource {
	var arg1Copy []*models.RouteWithBackends
	if arg1 != nil {
		arg1Copy = make([]*models.RouteWithBackends, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.createDestinationRuleResourcesMutex.Lock()
	ret, specificReturn := fake.createDestinationRuleResourcesReturnsOnCall[len(fake.createDestinationRuleResourcesArgsForCall)]
	fake.createDestinationRuleResourcesArgsForCall = append(fake.createDestinationRuleResourcesArgsForCall, struct {
		arg1 []*models.RouteWithBackends
		arg2 string
	}{arg1Copy, arg2})
	fake.recordInvocation("CreateDestinationRuleResources", []interface{}{arg1Copy, arg2})
	fake.createDestinationRuleResourcesMutex.Unlock()
	if fake.CreateDestinationRuleResourcesStub != nil {
		return fake.CreateDestinationRuleResourcesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createDestinationRuleResourcesReturns
	return fakeReturns.result1
}

func (fake *Config) CreateDestinationRuleResourcesCallCount() int {
	fake.createDestinationRuleResourcesMutex.RLock()
	defer fake.createDestinationRuleResourcesMutex.RUnlock()
	return len(fake.createDestinationRuleResourcesArgsForCall)
}

func (fake *Config) CreateDestinationRuleResourcesCalls(stub func([]*models.RouteWithBackends, string) []*v1alpha1.Resource) {
	fake.createDestinationRuleResourcesMutex.Lock()
	defer fake.createDestinationRuleResourcesMutex.Unlock()
	fake.CreateDestinationRuleResourcesStub = stub
}

func (fake *Config) CreateDestinationRuleResourcesArgsForCall(i int) ([]*models.RouteWithBackends, string) {
	fake.createDestinationRuleResourcesMutex.RLock()
	defer fake.createDestinationRuleResourcesMutex.RUnlock()
	argsForCall := fake.createDestinationRuleResourcesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Config) CreateDestinationRuleResourcesReturns(result1 []*v1alpha1.Resource) {
	fake.createDestinationRuleResourcesMutex.Lock()
	defer fake.createDestinationRuleResourcesMutex.Unlock()
	fake.CreateDestinationRuleResourcesStub = nil
	fake.createDestinationRuleResourcesReturns = struct {
		result1 []*v1alpha1.Resource
	}{result1}
}

func (fake *Config) CreateDestinationRuleResourcesReturnsOnCall(i int, result1 []*v1alpha1.Resource) {
	fake.createDestinationRuleResourcesMutex.Lock()
	defer fake.createDestinationRuleResourcesMutex.Unlock()
	fake.CreateDestinationRuleResourcesStub = nil
	if fake.createDestinationRuleResourcesReturnsOnCall == nil {
		fake.createDestinationRuleResourcesReturnsOnCall = make(map[int]struct {
			result1 []*v1alpha1.Resource
		})
	}
	fake.createDestinationRuleResourcesReturnsOnCall[i] = struct {
		result1 []*v1alpha1.Resource
	}{result1}
}

func (fake *Config) CreateGatewayResources() []*v1alpha1.Resource {
	fake.createGatewayResourcesMutex.Lock()
	ret, specificReturn := fake.createGatewayResourcesReturnsOnCall[len(fake.createGatewayResourcesArgsForCall)]
	fake.createGatewayResourcesArgsForCall = append(fake.createGatewayResourcesArgsForCall, struct {
	}{})
	fake.recordInvocation("CreateGatewayResources", []interface{}{})
	fake.createGatewayResourcesMutex.Unlock()
	if fake.CreateGatewayResourcesStub != nil {
		return fake.CreateGatewayResourcesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createGatewayResourcesReturns
	return fakeReturns.result1
}

func (fake *Config) CreateGatewayResourcesCallCount() int {
	fake.createGatewayResourcesMutex.RLock()
	defer fake.createGatewayResourcesMutex.RUnlock()
	return len(fake.createGatewayResourcesArgsForCall)
}

func (fake *Config) CreateGatewayResourcesCalls(stub func() []*v1alpha1.Resource) {
	fake.createGatewayResourcesMutex.Lock()
	defer fake.createGatewayResourcesMutex.Unlock()
	fake.CreateGatewayResourcesStub = stub
}

func (fake *Config) CreateGatewayResourcesReturns(result1 []*v1alpha1.Resource) {
	fake.createGatewayResourcesMutex.Lock()
	defer fake.createGatewayResourcesMutex.Unlock()
	fake.CreateGatewayResourcesStub = nil
	fake.createGatewayResourcesReturns = struct {
		result1 []*v1alpha1.Resource
	}{result1}
}

func (fake *Config) CreateGatewayResourcesReturnsOnCall(i int, result1 []*v1alpha1.Resource) {
	fake.createGatewayResourcesMutex.Lock()
	defer fake.createGatewayResourcesMutex.Unlock()
	fake.CreateGatewayResourcesStub = nil
	if fake.createGatewayResourcesReturnsOnCall == nil {
		fake.createGatewayResourcesReturnsOnCall = make(map[int]struct {
			result1 []*v1alpha1.Resource
		})
	}
	fake.createGatewayResourcesReturnsOnCall[i] = struct {
		result1 []*v1alpha1.Resource
	}{result1}
}

func (fake *Config) CreateServiceEntryResources(arg1 []*models.RouteWithBackends, arg2 string) []*v1alpha1.Resource {
	var arg1Copy []*models.RouteWithBackends
	if arg1 != nil {
		arg1Copy = make([]*models.RouteWithBackends, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.createServiceEntryResourcesMutex.Lock()
	ret, specificReturn := fake.createServiceEntryResourcesReturnsOnCall[len(fake.createServiceEntryResourcesArgsForCall)]
	fake.createServiceEntryResourcesArgsForCall = append(fake.createServiceEntryResourcesArgsForCall, struct {
		arg1 []*models.RouteWithBackends
		arg2 string
	}{arg1Copy, arg2})
	fake.recordInvocation("CreateServiceEntryResources", []interface{}{arg1Copy, arg2})
	fake.createServiceEntryResourcesMutex.Unlock()
	if fake.CreateServiceEntryResourcesStub != nil {
		return fake.CreateServiceEntryResourcesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createServiceEntryResourcesReturns
	return fakeReturns.result1
}

func (fake *Config) CreateServiceEntryResourcesCallCount() int {
	fake.createServiceEntryResourcesMutex.RLock()
	defer fake.createServiceEntryResourcesMutex.RUnlock()
	return len(fake.createServiceEntryResourcesArgsForCall)
}

func (fake *Config) CreateServiceEntryResourcesCalls(stub func([]*models.RouteWithBackends, string) []*v1alpha1.Resource) {
	fake.createServiceEntryResourcesMutex.Lock()
	defer fake.createServiceEntryResourcesMutex.Unlock()
	fake.CreateServiceEntryResourcesStub = stub
}

func (fake *Config) CreateServiceEntryResourcesArgsForCall(i int) ([]*models.RouteWithBackends, string) {
	fake.createServiceEntryResourcesMutex.RLock()
	defer fake.createServiceEntryResourcesMutex.RUnlock()
	argsForCall := fake.createServiceEntryResourcesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Config) CreateServiceEntryResourcesReturns(result1 []*v1alpha1.Resource) {
	fake.createServiceEntryResourcesMutex.Lock()
	defer fake.createServiceEntryResourcesMutex.Unlock()
	fake.CreateServiceEntryResourcesStub = nil
	fake.createServiceEntryResourcesReturns = struct {
		result1 []*v1alpha1.Resource
	}{result1}
}

func (fake *Config) CreateServiceEntryResourcesReturnsOnCall(i int, result1 []*v1alpha1.Resource) {
	fake.createServiceEntryResourcesMutex.Lock()
	defer fake.createServiceEntryResourcesMutex.Unlock()
	fake.CreateServiceEntryResourcesStub = nil
	if fake.createServiceEntryResourcesReturnsOnCall == nil {
		fake.createServiceEntryResourcesReturnsOnCall = make(map[int]struct {
			result1 []*v1alpha1.Resource
		})
	}
	fake.createServiceEntryResourcesReturnsOnCall[i] = struct {
		result1 []*v1alpha1.Resource
	}{result1}
}

func (fake *Config) CreateSidecarResources() []*v1alpha1.Resource {
	fake.createSidecarResourcesMutex.Lock()
	ret, specificReturn := fake.createSidecarResourcesReturnsOnCall[len(fake.createSidecarResourcesArgsForCall)]
	fake.createSidecarResourcesArgsForCall = append(fake.createSidecarResourcesArgsForCall, struct {
	}{})
	fake.recordInvocation("CreateSidecarResources", []interface{}{})
	fake.createSidecarResourcesMutex.Unlock()
	if fake.CreateSidecarResourcesStub != nil {
		return fake.CreateSidecarResourcesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createSidecarResourcesReturns
	return fakeReturns.result1
}

func (fake *Config) CreateSidecarResourcesCallCount() int {
	fake.createSidecarResourcesMutex.RLock()
	defer fake.createSidecarResourcesMutex.RUnlock()
	return len(fake.createSidecarResourcesArgsForCall)
}

func (fake *Config) CreateSidecarResourcesCalls(stub func() []*v1alpha1.Resource) {
	fake.createSidecarResourcesMutex.Lock()
	defer fake.createSidecarResourcesMutex.Unlock()
	fake.CreateSidecarResourcesStub = stub
}

func (fake *Config) CreateSidecarResourcesReturns(result1 []*v1alpha1.Resource) {
	fake.createSidecarResourcesMutex.Lock()
	defer fake.createSidecarResourcesMutex.Unlock()
	fake.CreateSidecarResourcesStub = nil
	fake.createSidecarResourcesReturns = struct {
		result1 []*v1alpha1.Resource
	}{result1}
}

func (fake *Config) CreateSidecarResourcesReturnsOnCall(i int, result1 []*v1alpha1.Resource) {
	fake.createSidecarResourcesMutex.Lock()
	defer fake.createSidecarResourcesMutex.Unlock()
	fake.CreateSidecarResourcesStub = nil
	if fake.createSidecarResourcesReturnsOnCall == nil {
		fake.createSidecarResourcesReturnsOnCall = make(map[int]struct {
			result1 []*v1alpha1.Resource
		})
	}
	fake.createSidecarResourcesReturnsOnCall[i] = struct {
		result1 []*v1alpha1.Resource
	}{result1}
}

func (fake *Config) CreateVirtualServiceResources(arg1 []*models.RouteWithBackends, arg2 string) []*v1alpha1.Resource {
	var arg1Copy []*models.RouteWithBackends
	if arg1 != nil {
		arg1Copy = make([]*models.RouteWithBackends, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.createVirtualServiceResourcesMutex.Lock()
	ret, specificReturn := fake.createVirtualServiceResourcesReturnsOnCall[len(fake.createVirtualServiceResourcesArgsForCall)]
	fake.createVirtualServiceResourcesArgsForCall = append(fake.createVirtualServiceResourcesArgsForCall, struct {
		arg1 []*models.RouteWithBackends
		arg2 string
	}{arg1Copy, arg2})
	fake.recordInvocation("CreateVirtualServiceResources", []interface{}{arg1Copy, arg2})
	fake.createVirtualServiceResourcesMutex.Unlock()
	if fake.CreateVirtualServiceResourcesStub != nil {
		return fake.CreateVirtualServiceResourcesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createVirtualServiceResourcesReturns
	return fakeReturns.result1
}

func (fake *Config) CreateVirtualServiceResourcesCallCount() int {
	fake.createVirtualServiceResourcesMutex.RLock()
	defer fake.createVirtualServiceResourcesMutex.RUnlock()
	return len(fake.createVirtualServiceResourcesArgsForCall)
}

func (fake *Config) CreateVirtualServiceResourcesCalls(stub func([]*models.RouteWithBackends, string) []*v1alpha1.Resource) {
	fake.createVirtualServiceResourcesMutex.Lock()
	defer fake.createVirtualServiceResourcesMutex.Unlock()
	fake.CreateVirtualServiceResourcesStub = stub
}

func (fake *Config) CreateVirtualServiceResourcesArgsForCall(i int) ([]*models.RouteWithBackends, string) {
	fake.createVirtualServiceResourcesMutex.RLock()
	defer fake.createVirtualServiceResourcesMutex.RUnlock()
	argsForCall := fake.createVirtualServiceResourcesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Config) CreateVirtualServiceResourcesReturns(result1 []*v1alpha1.Resource) {
	fake.createVirtualServiceResourcesMutex.Lock()
	defer fake.createVirtualServiceResourcesMutex.Unlock()
	fake.CreateVirtualServiceResourcesStub = nil
	fake.createVirtualServiceResourcesReturns = struct {
		result1 []*v1alpha1.Resource
	}{result1}
}

func (fake *Config) CreateVirtualServiceResourcesReturnsOnCall(i int, result1 []*v1alpha1.Resource) {
	fake.createVirtualServiceResourcesMutex.Lock()
	defer fake.createVirtualServiceResourcesMutex.Unlock()
	fake.CreateVirtualServiceResourcesStub = nil
	if fake.createVirtualServiceResourcesReturnsOnCall == nil {
		fake.createVirtualServiceResourcesReturnsOnCall = make(map[int]struct {
			result1 []*v1alpha1.Resource
		})
	}
	fake.createVirtualServiceResourcesReturnsOnCall[i] = struct {
		result1 []*v1alpha1.Resource
	}{result1}
}

func (fake *Config) EmptyResponse() []*v1alpha1.Resource {
	fake.emptyResponseMutex.Lock()
	ret, specificReturn := fake.emptyResponseReturnsOnCall[len(fake.emptyResponseArgsForCall)]
	fake.emptyResponseArgsForCall = append(fake.emptyResponseArgsForCall, struct {
	}{})
	fake.recordInvocation("EmptyResponse", []interface{}{})
	fake.emptyResponseMutex.Unlock()
	if fake.EmptyResponseStub != nil {
		return fake.EmptyResponseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.emptyResponseReturns
	return fakeReturns.result1
}

func (fake *Config) EmptyResponseCallCount() int {
	fake.emptyResponseMutex.RLock()
	defer fake.emptyResponseMutex.RUnlock()
	return len(fake.emptyResponseArgsForCall)
}

func (fake *Config) EmptyResponseCalls(stub func() []*v1alpha1.Resource) {
	fake.emptyResponseMutex.Lock()
	defer fake.emptyResponseMutex.Unlock()
	fake.EmptyResponseStub = stub
}

func (fake *Config) EmptyResponseReturns(result1 []*v1alpha1.Resource) {
	fake.emptyResponseMutex.Lock()
	defer fake.emptyResponseMutex.Unlock()
	fake.EmptyResponseStub = nil
	fake.emptyResponseReturns = struct {
		result1 []*v1alpha1.Resource
	}{result1}
}

func (fake *Config) EmptyResponseReturnsOnCall(i int, result1 []*v1alpha1.Resource) {
	fake.emptyResponseMutex.Lock()
	defer fake.emptyResponseMutex.Unlock()
	fake.EmptyResponseStub = nil
	if fake.emptyResponseReturnsOnCall == nil {
		fake.emptyResponseReturnsOnCall = make(map[int]struct {
			result1 []*v1alpha1.Resource
		})
	}
	fake.emptyResponseReturnsOnCall[i] = struct {
		result1 []*v1alpha1.Resource
	}{result1}
}

func (fake *Config) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createDestinationRuleResourcesMutex.RLock()
	defer fake.createDestinationRuleResourcesMutex.RUnlock()
	fake.createGatewayResourcesMutex.RLock()
	defer fake.createGatewayResourcesMutex.RUnlock()
	fake.createServiceEntryResourcesMutex.RLock()
	defer fake.createServiceEntryResourcesMutex.RUnlock()
	fake.createSidecarResourcesMutex.RLock()
	defer fake.createSidecarResourcesMutex.RUnlock()
	fake.createVirtualServiceResourcesMutex.RLock()
	defer fake.createVirtualServiceResourcesMutex.RUnlock()
	fake.emptyResponseMutex.RLock()
	defer fake.emptyResponseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Config) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
