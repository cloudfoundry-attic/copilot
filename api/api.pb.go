// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	HealthRequest
	HealthResponse
	RoutesRequest
	RoutesResponse
	AddRequest
	AddResponse
	BackendSet
	Backend
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HealthRequest struct {
}

func (m *HealthRequest) Reset()                    { *m = HealthRequest{} }
func (m *HealthRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()               {}
func (*HealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HealthResponse struct {
	Healthy bool `protobuf:"varint,1,opt,name=healthy" json:"healthy,omitempty"`
}

func (m *HealthResponse) Reset()                    { *m = HealthResponse{} }
func (m *HealthResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()               {}
func (*HealthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HealthResponse) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

type RoutesRequest struct {
}

func (m *RoutesRequest) Reset()                    { *m = RoutesRequest{} }
func (m *RoutesRequest) String() string            { return proto.CompactTextString(m) }
func (*RoutesRequest) ProtoMessage()               {}
func (*RoutesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RoutesResponse struct {
	// key is hostname
	Backends map[string]*BackendSet `protobuf:"bytes,1,rep,name=backends" json:"backends,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RoutesResponse) Reset()                    { *m = RoutesResponse{} }
func (m *RoutesResponse) String() string            { return proto.CompactTextString(m) }
func (*RoutesResponse) ProtoMessage()               {}
func (*RoutesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RoutesResponse) GetBackends() map[string]*BackendSet {
	if m != nil {
		return m.Backends
	}
	return nil
}

type AddRequest struct {
	ProcessGuid string `protobuf:"bytes,1,opt,name=processGuid" json:"processGuid,omitempty"`
	Hostname    string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AddRequest) GetProcessGuid() string {
	if m != nil {
		return m.ProcessGuid
	}
	return ""
}

func (m *AddRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type AddResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *AddResponse) Reset()                    { *m = AddResponse{} }
func (m *AddResponse) String() string            { return proto.CompactTextString(m) }
func (*AddResponse) ProtoMessage()               {}
func (*AddResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type BackendSet struct {
	Backends []*Backend `protobuf:"bytes,1,rep,name=backends" json:"backends,omitempty"`
}

func (m *BackendSet) Reset()                    { *m = BackendSet{} }
func (m *BackendSet) String() string            { return proto.CompactTextString(m) }
func (*BackendSet) ProtoMessage()               {}
func (*BackendSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BackendSet) GetBackends() []*Backend {
	if m != nil {
		return m.Backends
	}
	return nil
}

type Backend struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Port    uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Backend) Reset()                    { *m = Backend{} }
func (m *Backend) String() string            { return proto.CompactTextString(m) }
func (*Backend) ProtoMessage()               {}
func (*Backend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Backend) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Backend) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*HealthRequest)(nil), "api.HealthRequest")
	proto.RegisterType((*HealthResponse)(nil), "api.HealthResponse")
	proto.RegisterType((*RoutesRequest)(nil), "api.RoutesRequest")
	proto.RegisterType((*RoutesResponse)(nil), "api.RoutesResponse")
	proto.RegisterType((*AddRequest)(nil), "api.AddRequest")
	proto.RegisterType((*AddResponse)(nil), "api.AddResponse")
	proto.RegisterType((*BackendSet)(nil), "api.BackendSet")
	proto.RegisterType((*Backend)(nil), "api.Backend")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Copilot service

type CopilotClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	Routes(ctx context.Context, in *RoutesRequest, opts ...grpc.CallOption) (*RoutesResponse, error)
	AddRoute(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
}

type copilotClient struct {
	cc *grpc.ClientConn
}

func NewCopilotClient(cc *grpc.ClientConn) CopilotClient {
	return &copilotClient{cc}
}

func (c *copilotClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := grpc.Invoke(ctx, "/api.Copilot/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *copilotClient) Routes(ctx context.Context, in *RoutesRequest, opts ...grpc.CallOption) (*RoutesResponse, error) {
	out := new(RoutesResponse)
	err := grpc.Invoke(ctx, "/api.Copilot/Routes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *copilotClient) AddRoute(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := grpc.Invoke(ctx, "/api.Copilot/AddRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Copilot service

type CopilotServer interface {
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	Routes(context.Context, *RoutesRequest) (*RoutesResponse, error)
	AddRoute(context.Context, *AddRequest) (*AddResponse, error)
}

func RegisterCopilotServer(s *grpc.Server, srv CopilotServer) {
	s.RegisterService(&_Copilot_serviceDesc, srv)
}

func _Copilot_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CopilotServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Copilot/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CopilotServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Copilot_Routes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CopilotServer).Routes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Copilot/Routes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CopilotServer).Routes(ctx, req.(*RoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Copilot_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CopilotServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Copilot/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CopilotServer).AddRoute(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Copilot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Copilot",
	HandlerType: (*CopilotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _Copilot_Health_Handler,
		},
		{
			MethodName: "Routes",
			Handler:    _Copilot_Routes_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _Copilot_AddRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x4d, 0x4b, 0xeb, 0x40,
	0x14, 0x6d, 0xda, 0xf7, 0xda, 0xe4, 0xe6, 0xf5, 0x83, 0xfb, 0x36, 0x21, 0xab, 0x38, 0x20, 0x06,
	0x17, 0x15, 0x5a, 0x50, 0x11, 0x5c, 0xa8, 0x88, 0x22, 0xae, 0xc6, 0x5f, 0x90, 0x36, 0x03, 0x0d,
	0xad, 0x99, 0x98, 0x99, 0x08, 0xfd, 0x31, 0xee, 0xfc, 0xa1, 0x32, 0x5f, 0x4d, 0x83, 0xbb, 0xb9,
	0x67, 0xe6, 0x9c, 0x9c, 0x7b, 0x4e, 0x20, 0xc8, 0xaa, 0x62, 0x5e, 0xd5, 0x5c, 0x72, 0x1c, 0x64,
	0x55, 0x41, 0xa6, 0x30, 0x7e, 0x66, 0xd9, 0x4e, 0x6e, 0x28, 0xfb, 0x68, 0x98, 0x90, 0xe4, 0x1c,
	0x26, 0x0e, 0x10, 0x15, 0x2f, 0x05, 0xc3, 0x08, 0x46, 0x1b, 0x8d, 0xec, 0x23, 0x2f, 0xf1, 0x52,
	0x9f, 0xba, 0x51, 0x91, 0x29, 0x6f, 0x24, 0x13, 0x8e, 0xfc, 0xe5, 0xc1, 0xc4, 0x21, 0x96, 0x7d,
	0x0b, 0xfe, 0x2a, 0x5b, 0x6f, 0x59, 0x99, 0x8b, 0xc8, 0x4b, 0x06, 0x69, 0xb8, 0x38, 0x99, 0x2b,
	0x0f, 0xdd, 0x67, 0xf3, 0x7b, 0xfb, 0xe6, 0xb1, 0x94, 0xf5, 0x9e, 0x1e, 0x28, 0xf1, 0x2b, 0x8c,
	0x3b, 0x57, 0x38, 0x83, 0xc1, 0x96, 0x19, 0x27, 0x01, 0x55, 0x47, 0x3c, 0x85, 0xbf, 0x9f, 0xd9,
	0xae, 0x61, 0x51, 0x3f, 0xf1, 0xd2, 0x70, 0x31, 0xd5, 0xf2, 0x96, 0xf4, 0xc6, 0x24, 0x35, 0xb7,
	0x37, 0xfd, 0x6b, 0x8f, 0xbc, 0x00, 0xdc, 0xe5, 0xb9, 0x75, 0x8b, 0x09, 0x84, 0x55, 0xcd, 0xd7,
	0x4c, 0x88, 0xa7, 0xa6, 0xc8, 0xad, 0xe4, 0x31, 0x84, 0x31, 0xf8, 0x1b, 0x2e, 0x64, 0x99, 0xbd,
	0x1b, 0xf5, 0x80, 0x1e, 0x66, 0x72, 0x06, 0xa1, 0xd6, 0x6a, 0x53, 0x12, 0xcd, 0x5a, 0x31, 0x5d,
	0x4a, 0x76, 0x24, 0x97, 0x00, 0xad, 0x1b, 0x4c, 0x7f, 0xe5, 0xf1, 0xef, 0xd8, 0x70, 0xbb, 0x3a,
	0xb9, 0x82, 0x91, 0x05, 0x95, 0x78, 0x96, 0xe7, 0xb5, 0x13, 0x0f, 0xa8, 0x1b, 0x11, 0xe1, 0x4f,
	0xc5, 0x6b, 0xa9, 0xdd, 0x8d, 0xa9, 0x3e, 0x2f, 0xbe, 0x3d, 0x18, 0x3d, 0xf0, 0xaa, 0xd8, 0x71,
	0x89, 0x4b, 0x18, 0x9a, 0x3a, 0x11, 0xf5, 0x67, 0x3a, 0x65, 0xc7, 0xff, 0x3b, 0x98, 0xd9, 0x84,
	0xf4, 0x14, 0xc9, 0xd4, 0x63, 0x49, 0x9d, 0x92, 0x2d, 0xa9, 0xdb, 0x1f, 0xe9, 0xe1, 0x05, 0xf8,
	0x2a, 0x0f, 0x05, 0xa3, 0xe9, 0xa0, 0x8d, 0x3a, 0x9e, 0xb5, 0x80, 0x23, 0xac, 0x86, 0xfa, 0x37,
	0x5c, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xba, 0x41, 0x76, 0x07, 0x93, 0x02, 0x00, 0x00,
}
