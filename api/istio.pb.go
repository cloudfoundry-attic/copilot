// Code generated by protoc-gen-go. DO NOT EDIT.
// source: istio.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InternalRoutesRequest struct {
}

func (m *InternalRoutesRequest) Reset()                    { *m = InternalRoutesRequest{} }
func (m *InternalRoutesRequest) String() string            { return proto.CompactTextString(m) }
func (*InternalRoutesRequest) ProtoMessage()               {}
func (*InternalRoutesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type InternalRoutesResponse struct {
	InternalRoutes []*InternalRouteWithBackends `protobuf:"bytes,1,rep,name=internal_routes,json=internalRoutes" json:"internal_routes,omitempty"`
}

func (m *InternalRoutesResponse) Reset()                    { *m = InternalRoutesResponse{} }
func (m *InternalRoutesResponse) String() string            { return proto.CompactTextString(m) }
func (*InternalRoutesResponse) ProtoMessage()               {}
func (*InternalRoutesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *InternalRoutesResponse) GetInternalRoutes() []*InternalRouteWithBackends {
	if m != nil {
		return m.InternalRoutes
	}
	return nil
}

type InternalRouteWithBackends struct {
	Hostname string      `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Vip      string      `protobuf:"bytes,2,opt,name=vip" json:"vip,omitempty"`
	Backends *BackendSet `protobuf:"bytes,3,opt,name=backends" json:"backends,omitempty"`
}

func (m *InternalRouteWithBackends) Reset()                    { *m = InternalRouteWithBackends{} }
func (m *InternalRouteWithBackends) String() string            { return proto.CompactTextString(m) }
func (*InternalRouteWithBackends) ProtoMessage()               {}
func (*InternalRouteWithBackends) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *InternalRouteWithBackends) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *InternalRouteWithBackends) GetVip() string {
	if m != nil {
		return m.Vip
	}
	return ""
}

func (m *InternalRouteWithBackends) GetBackends() *BackendSet {
	if m != nil {
		return m.Backends
	}
	return nil
}

type RoutesRequest struct {
}

func (m *RoutesRequest) Reset()                    { *m = RoutesRequest{} }
func (m *RoutesRequest) String() string            { return proto.CompactTextString(m) }
func (*RoutesRequest) ProtoMessage()               {}
func (*RoutesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type RoutesResponse struct {
	// key is hostname
	Backends map[string]*BackendSet `protobuf:"bytes,1,rep,name=backends" json:"backends,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RoutesResponse) Reset()                    { *m = RoutesResponse{} }
func (m *RoutesResponse) String() string            { return proto.CompactTextString(m) }
func (*RoutesResponse) ProtoMessage()               {}
func (*RoutesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RoutesResponse) GetBackends() map[string]*BackendSet {
	if m != nil {
		return m.Backends
	}
	return nil
}

type BackendSet struct {
	Backends []*Backend `protobuf:"bytes,1,rep,name=backends" json:"backends,omitempty"`
}

func (m *BackendSet) Reset()                    { *m = BackendSet{} }
func (m *BackendSet) String() string            { return proto.CompactTextString(m) }
func (*BackendSet) ProtoMessage()               {}
func (*BackendSet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *BackendSet) GetBackends() []*Backend {
	if m != nil {
		return m.Backends
	}
	return nil
}

type Backend struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Port    uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Backend) Reset()                    { *m = Backend{} }
func (m *Backend) String() string            { return proto.CompactTextString(m) }
func (*Backend) ProtoMessage()               {}
func (*Backend) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *Backend) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Backend) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*InternalRoutesRequest)(nil), "api.InternalRoutesRequest")
	proto.RegisterType((*InternalRoutesResponse)(nil), "api.InternalRoutesResponse")
	proto.RegisterType((*InternalRouteWithBackends)(nil), "api.InternalRouteWithBackends")
	proto.RegisterType((*RoutesRequest)(nil), "api.RoutesRequest")
	proto.RegisterType((*RoutesResponse)(nil), "api.RoutesResponse")
	proto.RegisterType((*BackendSet)(nil), "api.BackendSet")
	proto.RegisterType((*Backend)(nil), "api.Backend")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IstioCopilot service

type IstioCopilotClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	Routes(ctx context.Context, in *RoutesRequest, opts ...grpc.CallOption) (*RoutesResponse, error)
	InternalRoutes(ctx context.Context, in *InternalRoutesRequest, opts ...grpc.CallOption) (*InternalRoutesResponse, error)
}

type istioCopilotClient struct {
	cc *grpc.ClientConn
}

func NewIstioCopilotClient(cc *grpc.ClientConn) IstioCopilotClient {
	return &istioCopilotClient{cc}
}

func (c *istioCopilotClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := grpc.Invoke(ctx, "/api.IstioCopilot/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *istioCopilotClient) Routes(ctx context.Context, in *RoutesRequest, opts ...grpc.CallOption) (*RoutesResponse, error) {
	out := new(RoutesResponse)
	err := grpc.Invoke(ctx, "/api.IstioCopilot/Routes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *istioCopilotClient) InternalRoutes(ctx context.Context, in *InternalRoutesRequest, opts ...grpc.CallOption) (*InternalRoutesResponse, error) {
	out := new(InternalRoutesResponse)
	err := grpc.Invoke(ctx, "/api.IstioCopilot/InternalRoutes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IstioCopilot service

type IstioCopilotServer interface {
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	Routes(context.Context, *RoutesRequest) (*RoutesResponse, error)
	InternalRoutes(context.Context, *InternalRoutesRequest) (*InternalRoutesResponse, error)
}

func RegisterIstioCopilotServer(s *grpc.Server, srv IstioCopilotServer) {
	s.RegisterService(&_IstioCopilot_serviceDesc, srv)
}

func _IstioCopilot_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IstioCopilotServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.IstioCopilot/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IstioCopilotServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IstioCopilot_Routes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IstioCopilotServer).Routes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.IstioCopilot/Routes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IstioCopilotServer).Routes(ctx, req.(*RoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IstioCopilot_InternalRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IstioCopilotServer).InternalRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.IstioCopilot/InternalRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IstioCopilotServer).InternalRoutes(ctx, req.(*InternalRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IstioCopilot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.IstioCopilot",
	HandlerType: (*IstioCopilotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _IstioCopilot_Health_Handler,
		},
		{
			MethodName: "Routes",
			Handler:    _IstioCopilot_Routes_Handler,
		},
		{
			MethodName: "InternalRoutes",
			Handler:    _IstioCopilot_InternalRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "istio.proto",
}

func init() { proto.RegisterFile("istio.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x6d, 0x1a, 0x6d, 0xeb, 0xf4, 0x4b, 0x46, 0xd4, 0x18, 0x41, 0x6a, 0x40, 0x08, 0x08, 0x3d,
	0xb4, 0xa0, 0x22, 0x78, 0x51, 0x44, 0x8b, 0x9e, 0xe2, 0xc1, 0xa3, 0x6c, 0xdb, 0x85, 0x2e, 0x4d,
	0xb3, 0x6b, 0x76, 0x5b, 0xe8, 0x8f, 0xf1, 0xe7, 0xf8, 0xbf, 0x24, 0x9b, 0xed, 0xc7, 0xb6, 0xf5,
	0xb6, 0x33, 0x6f, 0xde, 0xdb, 0xf7, 0x86, 0x81, 0x2a, 0x93, 0x8a, 0xf1, 0xb6, 0x48, 0xb9, 0xe2,
	0xe8, 0x12, 0xc1, 0xfc, 0xda, 0x80, 0x4f, 0x26, 0x3c, 0xc9, 0x5b, 0xc1, 0x29, 0x1c, 0xf7, 0x12,
	0x45, 0xd3, 0x84, 0xc4, 0x11, 0x9f, 0x2a, 0x2a, 0x23, 0xfa, 0x3d, 0xa5, 0x52, 0x05, 0x04, 0x4e,
	0x36, 0x01, 0x29, 0x78, 0x22, 0x29, 0xbe, 0x40, 0x93, 0x19, 0xe4, 0x2b, 0xd5, 0x90, 0xe7, 0xb4,
	0xdc, 0xb0, 0xda, 0xb9, 0x68, 0x13, 0xc1, 0xda, 0x16, 0xeb, 0x93, 0xa9, 0xd1, 0x23, 0x19, 0x8c,
	0x69, 0x32, 0x94, 0x51, 0x83, 0x59, 0x82, 0xc1, 0x0c, 0xce, 0xfe, 0x1d, 0x46, 0x1f, 0x2a, 0x23,
	0x2e, 0x55, 0x42, 0x26, 0xd4, 0x73, 0x5a, 0x4e, 0x78, 0x10, 0x2d, 0x6b, 0x3c, 0x04, 0x77, 0xc6,
	0x84, 0x57, 0xd4, 0xed, 0xec, 0x89, 0xd7, 0x50, 0xe9, 0x1b, 0xa6, 0xe7, 0xb6, 0x9c, 0xb0, 0xda,
	0x69, 0x6a, 0x33, 0x46, 0xee, 0x83, 0xaa, 0x68, 0x39, 0x10, 0x34, 0xa1, 0x6e, 0x67, 0xfd, 0x71,
	0xa0, 0xb1, 0x11, 0xf2, 0x61, 0x4d, 0x30, 0x4f, 0x77, 0xa9, 0x05, 0xed, 0xb1, 0x85, 0xbe, 0x7c,
	0x4e, 0x54, 0x3a, 0x5f, 0x7d, 0xe1, 0xbf, 0x43, 0xdd, 0x82, 0x32, 0xcb, 0x63, 0x3a, 0x37, 0x49,
	0xb2, 0x27, 0x5e, 0xc1, 0xfe, 0x8c, 0xc4, 0x53, 0xaa, 0x63, 0xec, 0xf0, 0x9b, 0xa3, 0xf7, 0xc5,
	0x3b, 0x27, 0xb8, 0x01, 0x58, 0x01, 0x18, 0x6e, 0x59, 0xab, 0xad, 0x73, 0xd7, 0x82, 0xde, 0x42,
	0xd9, 0x34, 0xd1, 0x83, 0x32, 0x19, 0x0e, 0x53, 0x2a, 0xa5, 0xf1, 0xb0, 0x28, 0x11, 0x61, 0x4f,
	0xf0, 0x54, 0x69, 0x1b, 0xf5, 0x48, 0xbf, 0x3b, 0xbf, 0x0e, 0xd4, 0x7a, 0xd9, 0xe1, 0x3c, 0x71,
	0xc1, 0x62, 0xae, 0xb0, 0x0b, 0xa5, 0x57, 0x4a, 0x62, 0x35, 0x42, 0xd4, 0x7f, 0xe5, 0x85, 0xd9,
	0x9f, 0x7f, 0x64, 0xf5, 0xf2, 0xd5, 0x04, 0x85, 0x8c, 0x94, 0xaf, 0xcb, 0x90, 0xac, 0xa5, 0x1b,
	0x92, 0xbd, 0xcf, 0xa0, 0x80, 0x6f, 0xd0, 0xb0, 0xef, 0x0e, 0xfd, 0xed, 0xb3, 0x5a, 0x8a, 0x9c,
	0xef, 0xc4, 0x16, 0x62, 0xfd, 0x92, 0x3e, 0xf2, 0xee, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xab,
	0xc1, 0x49, 0xdb, 0x06, 0x03, 0x00, 0x00,
}
