// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/bbs/events"
	modelsa "code.cloudfoundry.org/bbs/models"
	"code.cloudfoundry.org/copilot/models"
	"code.cloudfoundry.org/lager"
)

type BBSEventer struct {
	ActualLRPsStub        func(lager.Logger, modelsa.ActualLRPFilter) ([]*modelsa.ActualLRP, error)
	actualLRPsMutex       sync.RWMutex
	actualLRPsArgsForCall []struct {
		arg1 lager.Logger
		arg2 modelsa.ActualLRPFilter
	}
	actualLRPsReturns struct {
		result1 []*modelsa.ActualLRP
		result2 error
	}
	actualLRPsReturnsOnCall map[int]struct {
		result1 []*modelsa.ActualLRP
		result2 error
	}
	SubscribeToInstanceEventsStub        func(lager.Logger) (events.EventSource, error)
	subscribeToInstanceEventsMutex       sync.RWMutex
	subscribeToInstanceEventsArgsForCall []struct {
		arg1 lager.Logger
	}
	subscribeToInstanceEventsReturns struct {
		result1 events.EventSource
		result2 error
	}
	subscribeToInstanceEventsReturnsOnCall map[int]struct {
		result1 events.EventSource
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *BBSEventer) ActualLRPs(arg1 lager.Logger, arg2 modelsa.ActualLRPFilter) ([]*modelsa.ActualLRP, error) {
	fake.actualLRPsMutex.Lock()
	ret, specificReturn := fake.actualLRPsReturnsOnCall[len(fake.actualLRPsArgsForCall)]
	fake.actualLRPsArgsForCall = append(fake.actualLRPsArgsForCall, struct {
		arg1 lager.Logger
		arg2 modelsa.ActualLRPFilter
	}{arg1, arg2})
	fake.recordInvocation("ActualLRPs", []interface{}{arg1, arg2})
	fake.actualLRPsMutex.Unlock()
	if fake.ActualLRPsStub != nil {
		return fake.ActualLRPsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.actualLRPsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *BBSEventer) ActualLRPsCallCount() int {
	fake.actualLRPsMutex.RLock()
	defer fake.actualLRPsMutex.RUnlock()
	return len(fake.actualLRPsArgsForCall)
}

func (fake *BBSEventer) ActualLRPsCalls(stub func(lager.Logger, modelsa.ActualLRPFilter) ([]*modelsa.ActualLRP, error)) {
	fake.actualLRPsMutex.Lock()
	defer fake.actualLRPsMutex.Unlock()
	fake.ActualLRPsStub = stub
}

func (fake *BBSEventer) ActualLRPsArgsForCall(i int) (lager.Logger, modelsa.ActualLRPFilter) {
	fake.actualLRPsMutex.RLock()
	defer fake.actualLRPsMutex.RUnlock()
	argsForCall := fake.actualLRPsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *BBSEventer) ActualLRPsReturns(result1 []*modelsa.ActualLRP, result2 error) {
	fake.actualLRPsMutex.Lock()
	defer fake.actualLRPsMutex.Unlock()
	fake.ActualLRPsStub = nil
	fake.actualLRPsReturns = struct {
		result1 []*modelsa.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *BBSEventer) ActualLRPsReturnsOnCall(i int, result1 []*modelsa.ActualLRP, result2 error) {
	fake.actualLRPsMutex.Lock()
	defer fake.actualLRPsMutex.Unlock()
	fake.ActualLRPsStub = nil
	if fake.actualLRPsReturnsOnCall == nil {
		fake.actualLRPsReturnsOnCall = make(map[int]struct {
			result1 []*modelsa.ActualLRP
			result2 error
		})
	}
	fake.actualLRPsReturnsOnCall[i] = struct {
		result1 []*modelsa.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *BBSEventer) SubscribeToInstanceEvents(arg1 lager.Logger) (events.EventSource, error) {
	fake.subscribeToInstanceEventsMutex.Lock()
	ret, specificReturn := fake.subscribeToInstanceEventsReturnsOnCall[len(fake.subscribeToInstanceEventsArgsForCall)]
	fake.subscribeToInstanceEventsArgsForCall = append(fake.subscribeToInstanceEventsArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("SubscribeToInstanceEvents", []interface{}{arg1})
	fake.subscribeToInstanceEventsMutex.Unlock()
	if fake.SubscribeToInstanceEventsStub != nil {
		return fake.SubscribeToInstanceEventsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.subscribeToInstanceEventsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *BBSEventer) SubscribeToInstanceEventsCallCount() int {
	fake.subscribeToInstanceEventsMutex.RLock()
	defer fake.subscribeToInstanceEventsMutex.RUnlock()
	return len(fake.subscribeToInstanceEventsArgsForCall)
}

func (fake *BBSEventer) SubscribeToInstanceEventsCalls(stub func(lager.Logger) (events.EventSource, error)) {
	fake.subscribeToInstanceEventsMutex.Lock()
	defer fake.subscribeToInstanceEventsMutex.Unlock()
	fake.SubscribeToInstanceEventsStub = stub
}

func (fake *BBSEventer) SubscribeToInstanceEventsArgsForCall(i int) lager.Logger {
	fake.subscribeToInstanceEventsMutex.RLock()
	defer fake.subscribeToInstanceEventsMutex.RUnlock()
	argsForCall := fake.subscribeToInstanceEventsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *BBSEventer) SubscribeToInstanceEventsReturns(result1 events.EventSource, result2 error) {
	fake.subscribeToInstanceEventsMutex.Lock()
	defer fake.subscribeToInstanceEventsMutex.Unlock()
	fake.SubscribeToInstanceEventsStub = nil
	fake.subscribeToInstanceEventsReturns = struct {
		result1 events.EventSource
		result2 error
	}{result1, result2}
}

func (fake *BBSEventer) SubscribeToInstanceEventsReturnsOnCall(i int, result1 events.EventSource, result2 error) {
	fake.subscribeToInstanceEventsMutex.Lock()
	defer fake.subscribeToInstanceEventsMutex.Unlock()
	fake.SubscribeToInstanceEventsStub = nil
	if fake.subscribeToInstanceEventsReturnsOnCall == nil {
		fake.subscribeToInstanceEventsReturnsOnCall = make(map[int]struct {
			result1 events.EventSource
			result2 error
		})
	}
	fake.subscribeToInstanceEventsReturnsOnCall[i] = struct {
		result1 events.EventSource
		result2 error
	}{result1, result2}
}

func (fake *BBSEventer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.actualLRPsMutex.RLock()
	defer fake.actualLRPsMutex.RUnlock()
	fake.subscribeToInstanceEventsMutex.RLock()
	defer fake.subscribeToInstanceEventsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *BBSEventer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ models.BBSEventer = new(BBSEventer)
