// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/copilot/models"
)

type RouteMappings struct {
	GetCalculatedWeightStub        func(*models.RouteMapping) int32
	getCalculatedWeightMutex       sync.RWMutex
	getCalculatedWeightArgsForCall []struct {
		arg1 *models.RouteMapping
	}
	getCalculatedWeightReturns struct {
		result1 int32
	}
	getCalculatedWeightReturnsOnCall map[int]struct {
		result1 int32
	}
	ListStub        func() map[string]*models.RouteMapping
	listMutex       sync.RWMutex
	listArgsForCall []struct {
	}
	listReturns struct {
		result1 map[string]*models.RouteMapping
	}
	listReturnsOnCall map[int]struct {
		result1 map[string]*models.RouteMapping
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RouteMappings) GetCalculatedWeight(arg1 *models.RouteMapping) int32 {
	fake.getCalculatedWeightMutex.Lock()
	ret, specificReturn := fake.getCalculatedWeightReturnsOnCall[len(fake.getCalculatedWeightArgsForCall)]
	fake.getCalculatedWeightArgsForCall = append(fake.getCalculatedWeightArgsForCall, struct {
		arg1 *models.RouteMapping
	}{arg1})
	fake.recordInvocation("GetCalculatedWeight", []interface{}{arg1})
	fake.getCalculatedWeightMutex.Unlock()
	if fake.GetCalculatedWeightStub != nil {
		return fake.GetCalculatedWeightStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getCalculatedWeightReturns
	return fakeReturns.result1
}

func (fake *RouteMappings) GetCalculatedWeightCallCount() int {
	fake.getCalculatedWeightMutex.RLock()
	defer fake.getCalculatedWeightMutex.RUnlock()
	return len(fake.getCalculatedWeightArgsForCall)
}

func (fake *RouteMappings) GetCalculatedWeightCalls(stub func(*models.RouteMapping) int32) {
	fake.getCalculatedWeightMutex.Lock()
	defer fake.getCalculatedWeightMutex.Unlock()
	fake.GetCalculatedWeightStub = stub
}

func (fake *RouteMappings) GetCalculatedWeightArgsForCall(i int) *models.RouteMapping {
	fake.getCalculatedWeightMutex.RLock()
	defer fake.getCalculatedWeightMutex.RUnlock()
	argsForCall := fake.getCalculatedWeightArgsForCall[i]
	return argsForCall.arg1
}

func (fake *RouteMappings) GetCalculatedWeightReturns(result1 int32) {
	fake.getCalculatedWeightMutex.Lock()
	defer fake.getCalculatedWeightMutex.Unlock()
	fake.GetCalculatedWeightStub = nil
	fake.getCalculatedWeightReturns = struct {
		result1 int32
	}{result1}
}

func (fake *RouteMappings) GetCalculatedWeightReturnsOnCall(i int, result1 int32) {
	fake.getCalculatedWeightMutex.Lock()
	defer fake.getCalculatedWeightMutex.Unlock()
	fake.GetCalculatedWeightStub = nil
	if fake.getCalculatedWeightReturnsOnCall == nil {
		fake.getCalculatedWeightReturnsOnCall = make(map[int]struct {
			result1 int32
		})
	}
	fake.getCalculatedWeightReturnsOnCall[i] = struct {
		result1 int32
	}{result1}
}

func (fake *RouteMappings) List() map[string]*models.RouteMapping {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
	}{})
	fake.recordInvocation("List", []interface{}{})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listReturns
	return fakeReturns.result1
}

func (fake *RouteMappings) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *RouteMappings) ListCalls(stub func() map[string]*models.RouteMapping) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *RouteMappings) ListReturns(result1 map[string]*models.RouteMapping) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 map[string]*models.RouteMapping
	}{result1}
}

func (fake *RouteMappings) ListReturnsOnCall(i int, result1 map[string]*models.RouteMapping) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 map[string]*models.RouteMapping
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 map[string]*models.RouteMapping
	}{result1}
}

func (fake *RouteMappings) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCalculatedWeightMutex.RLock()
	defer fake.getCalculatedWeightMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RouteMappings) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
