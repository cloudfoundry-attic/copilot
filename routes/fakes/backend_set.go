// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/copilot/models"
)

type BackendSet struct {
	GetStub        func(guid models.DiegoProcessGUID) *models.BackendSet
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		guid models.DiegoProcessGUID
	}
	getReturns struct {
		result1 *models.BackendSet
	}
	getReturnsOnCall map[int]struct {
		result1 *models.BackendSet
	}
	GetInternalBackendsStub        func(guid models.DiegoProcessGUID) *models.BackendSet
	getInternalBackendsMutex       sync.RWMutex
	getInternalBackendsArgsForCall []struct {
		guid models.DiegoProcessGUID
	}
	getInternalBackendsReturns struct {
		result1 *models.BackendSet
	}
	getInternalBackendsReturnsOnCall map[int]struct {
		result1 *models.BackendSet
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *BackendSet) Get(guid models.DiegoProcessGUID) *models.BackendSet {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		guid models.DiegoProcessGUID
	}{guid})
	fake.recordInvocation("Get", []interface{}{guid})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(guid)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getReturns.result1
}

func (fake *BackendSet) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *BackendSet) GetArgsForCall(i int) models.DiegoProcessGUID {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].guid
}

func (fake *BackendSet) GetReturns(result1 *models.BackendSet) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *models.BackendSet
	}{result1}
}

func (fake *BackendSet) GetReturnsOnCall(i int, result1 *models.BackendSet) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *models.BackendSet
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *models.BackendSet
	}{result1}
}

func (fake *BackendSet) GetInternalBackends(guid models.DiegoProcessGUID) *models.BackendSet {
	fake.getInternalBackendsMutex.Lock()
	ret, specificReturn := fake.getInternalBackendsReturnsOnCall[len(fake.getInternalBackendsArgsForCall)]
	fake.getInternalBackendsArgsForCall = append(fake.getInternalBackendsArgsForCall, struct {
		guid models.DiegoProcessGUID
	}{guid})
	fake.recordInvocation("GetInternalBackends", []interface{}{guid})
	fake.getInternalBackendsMutex.Unlock()
	if fake.GetInternalBackendsStub != nil {
		return fake.GetInternalBackendsStub(guid)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getInternalBackendsReturns.result1
}

func (fake *BackendSet) GetInternalBackendsCallCount() int {
	fake.getInternalBackendsMutex.RLock()
	defer fake.getInternalBackendsMutex.RUnlock()
	return len(fake.getInternalBackendsArgsForCall)
}

func (fake *BackendSet) GetInternalBackendsArgsForCall(i int) models.DiegoProcessGUID {
	fake.getInternalBackendsMutex.RLock()
	defer fake.getInternalBackendsMutex.RUnlock()
	return fake.getInternalBackendsArgsForCall[i].guid
}

func (fake *BackendSet) GetInternalBackendsReturns(result1 *models.BackendSet) {
	fake.GetInternalBackendsStub = nil
	fake.getInternalBackendsReturns = struct {
		result1 *models.BackendSet
	}{result1}
}

func (fake *BackendSet) GetInternalBackendsReturnsOnCall(i int, result1 *models.BackendSet) {
	fake.GetInternalBackendsStub = nil
	if fake.getInternalBackendsReturnsOnCall == nil {
		fake.getInternalBackendsReturnsOnCall = make(map[int]struct {
			result1 *models.BackendSet
		})
	}
	fake.getInternalBackendsReturnsOnCall[i] = struct {
		result1 *models.BackendSet
	}{result1}
}

func (fake *BackendSet) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getInternalBackendsMutex.RLock()
	defer fake.getInternalBackendsMutex.RUnlock()
	return fake.invocations
}

func (fake *BackendSet) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
