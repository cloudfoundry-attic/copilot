package testhelpers

import (
	"crypto/tls"
	"crypto/x509"
	"io/ioutil"
	"net"
	"time"

	"github.com/square/certstrap/pkix"

	. "github.com/onsi/gomega"
)

type Credentials struct {
	CA, Key, Cert []byte
}

func GenerateCredentials(caCommonName string, commonName string) *Credentials {
	rootKey, err := pkix.CreateRSAKey(1024)
	Expect(err).NotTo(HaveOccurred())
	certAuthority, err := pkix.CreateCertificateAuthority(rootKey, "some-ou", time.Now().Add(1*time.Hour), "some-org", "some-country", "", "", caCommonName)
	Expect(err).NotTo(HaveOccurred())

	key, err := pkix.CreateRSAKey(1024)
	Expect(err).NotTo(HaveOccurred())
	csr, err := pkix.CreateCertificateSigningRequest(key, "some-ou", []net.IP{net.IPv4(127, 0, 0, 1)}, nil, "some-org", "some-country", "", "", commonName)
	Expect(err).NotTo(HaveOccurred())
	cert, err := pkix.CreateCertificateHost(certAuthority, rootKey, csr, time.Now().Add(1*time.Hour))
	Expect(err).NotTo(HaveOccurred())

	caBytes, err := certAuthority.Export()
	Expect(err).NotTo(HaveOccurred())
	keyBytes, err := key.ExportPrivate()
	Expect(err).NotTo(HaveOccurred())
	certBytes, err := cert.Export()
	Expect(err).NotTo(HaveOccurred())

	return &Credentials{CA: caBytes, Key: keyBytes, Cert: certBytes}
}

type MTLSCredentials struct {
	Server *Credentials
	Client *Credentials
}

func (m MTLSCredentials) ClientTLSConfig() *tls.Config {
	rootCAs := x509.NewCertPool()
	ok := rootCAs.AppendCertsFromPEM(m.Server.CA)
	Expect(ok).To(BeTrue())

	clientCert, err := tls.X509KeyPair(m.Client.Cert, m.Client.Key)
	Expect(err).NotTo(HaveOccurred())

	return &tls.Config{
		RootCAs:      rootCAs,
		Certificates: []tls.Certificate{clientCert},
	}
}

type ServerTLSFilePaths struct {
	ClientCA, ServerCert, ServerKey string
}

// CreateServerTLSFiles creates files that can be passed into the configuration
// for the server frontend
// The caller is responsible for cleaning up the files generated by this method
func (m MTLSCredentials) CreateServerTLSFiles() ServerTLSFilePaths {
	s := ServerTLSFilePaths{
		ClientCA:   TempFileName(),
		ServerCert: TempFileName(),
		ServerKey:  TempFileName(),
	}
	Expect(ioutil.WriteFile(s.ClientCA, m.Client.CA, 0600)).To(Succeed())
	Expect(ioutil.WriteFile(s.ServerCert, m.Server.Cert, 0600)).To(Succeed())
	Expect(ioutil.WriteFile(s.ServerKey, m.Server.Key, 0600)).To(Succeed())
	return s
}

func GenerateMTLS() MTLSCredentials {
	return MTLSCredentials{
		Server: GenerateCredentials("serverCA", "CopilotServer"),
		Client: GenerateCredentials("clientCA", "CopilotClient"),
	}
}
