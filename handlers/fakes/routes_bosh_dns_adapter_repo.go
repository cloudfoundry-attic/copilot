// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type RoutesRepoBoshDNSAdapterInterface struct {
	GetVIPByNameStub        func(hostname string) (string, bool)
	getVIPByNameMutex       sync.RWMutex
	getVIPByNameArgsForCall []struct {
		hostname string
	}
	getVIPByNameReturns struct {
		result1 string
		result2 bool
	}
	getVIPByNameReturnsOnCall map[int]struct {
		result1 string
		result2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RoutesRepoBoshDNSAdapterInterface) GetVIPByName(hostname string) (string, bool) {
	fake.getVIPByNameMutex.Lock()
	ret, specificReturn := fake.getVIPByNameReturnsOnCall[len(fake.getVIPByNameArgsForCall)]
	fake.getVIPByNameArgsForCall = append(fake.getVIPByNameArgsForCall, struct {
		hostname string
	}{hostname})
	fake.recordInvocation("GetVIPByName", []interface{}{hostname})
	fake.getVIPByNameMutex.Unlock()
	if fake.GetVIPByNameStub != nil {
		return fake.GetVIPByNameStub(hostname)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getVIPByNameReturns.result1, fake.getVIPByNameReturns.result2
}

func (fake *RoutesRepoBoshDNSAdapterInterface) GetVIPByNameCallCount() int {
	fake.getVIPByNameMutex.RLock()
	defer fake.getVIPByNameMutex.RUnlock()
	return len(fake.getVIPByNameArgsForCall)
}

func (fake *RoutesRepoBoshDNSAdapterInterface) GetVIPByNameArgsForCall(i int) string {
	fake.getVIPByNameMutex.RLock()
	defer fake.getVIPByNameMutex.RUnlock()
	return fake.getVIPByNameArgsForCall[i].hostname
}

func (fake *RoutesRepoBoshDNSAdapterInterface) GetVIPByNameReturns(result1 string, result2 bool) {
	fake.GetVIPByNameStub = nil
	fake.getVIPByNameReturns = struct {
		result1 string
		result2 bool
	}{result1, result2}
}

func (fake *RoutesRepoBoshDNSAdapterInterface) GetVIPByNameReturnsOnCall(i int, result1 string, result2 bool) {
	fake.GetVIPByNameStub = nil
	if fake.getVIPByNameReturnsOnCall == nil {
		fake.getVIPByNameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 bool
		})
	}
	fake.getVIPByNameReturnsOnCall[i] = struct {
		result1 string
		result2 bool
	}{result1, result2}
}

func (fake *RoutesRepoBoshDNSAdapterInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getVIPByNameMutex.RLock()
	defer fake.getVIPByNameMutex.RUnlock()
	return fake.invocations
}

func (fake *RoutesRepoBoshDNSAdapterInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
