// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	models "code.cloudfoundry.org/copilot/models"
)

type RoutesRepo struct {
	DeleteStub        func(models.RouteGUID)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 models.RouteGUID
	}
	GetStub        func(models.RouteGUID) (*models.Route, bool)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 models.RouteGUID
	}
	getReturns struct {
		result1 *models.Route
		result2 bool
	}
	getReturnsOnCall map[int]struct {
		result1 *models.Route
		result2 bool
	}
	ListStub        func() map[string]string
	listMutex       sync.RWMutex
	listArgsForCall []struct {
	}
	listReturns struct {
		result1 map[string]string
	}
	listReturnsOnCall map[int]struct {
		result1 map[string]string
	}
	SyncStub        func([]*models.Route)
	syncMutex       sync.RWMutex
	syncArgsForCall []struct {
		arg1 []*models.Route
	}
	UpsertStub        func(*models.Route)
	upsertMutex       sync.RWMutex
	upsertArgsForCall []struct {
		arg1 *models.Route
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RoutesRepo) Delete(arg1 models.RouteGUID) {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 models.RouteGUID
	}{arg1})
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		fake.DeleteStub(arg1)
	}
}

func (fake *RoutesRepo) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *RoutesRepo) DeleteCalls(stub func(models.RouteGUID)) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *RoutesRepo) DeleteArgsForCall(i int) models.RouteGUID {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *RoutesRepo) Get(arg1 models.RouteGUID) (*models.Route, bool) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 models.RouteGUID
	}{arg1})
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *RoutesRepo) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *RoutesRepo) GetCalls(stub func(models.RouteGUID) (*models.Route, bool)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *RoutesRepo) GetArgsForCall(i int) models.RouteGUID {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *RoutesRepo) GetReturns(result1 *models.Route, result2 bool) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *models.Route
		result2 bool
	}{result1, result2}
}

func (fake *RoutesRepo) GetReturnsOnCall(i int, result1 *models.Route, result2 bool) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *models.Route
			result2 bool
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *models.Route
		result2 bool
	}{result1, result2}
}

func (fake *RoutesRepo) List() map[string]string {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
	}{})
	fake.recordInvocation("List", []interface{}{})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listReturns
	return fakeReturns.result1
}

func (fake *RoutesRepo) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *RoutesRepo) ListCalls(stub func() map[string]string) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *RoutesRepo) ListReturns(result1 map[string]string) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 map[string]string
	}{result1}
}

func (fake *RoutesRepo) ListReturnsOnCall(i int, result1 map[string]string) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 map[string]string
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 map[string]string
	}{result1}
}

func (fake *RoutesRepo) Sync(arg1 []*models.Route) {
	var arg1Copy []*models.Route
	if arg1 != nil {
		arg1Copy = make([]*models.Route, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.syncMutex.Lock()
	fake.syncArgsForCall = append(fake.syncArgsForCall, struct {
		arg1 []*models.Route
	}{arg1Copy})
	fake.recordInvocation("Sync", []interface{}{arg1Copy})
	fake.syncMutex.Unlock()
	if fake.SyncStub != nil {
		fake.SyncStub(arg1)
	}
}

func (fake *RoutesRepo) SyncCallCount() int {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return len(fake.syncArgsForCall)
}

func (fake *RoutesRepo) SyncCalls(stub func([]*models.Route)) {
	fake.syncMutex.Lock()
	defer fake.syncMutex.Unlock()
	fake.SyncStub = stub
}

func (fake *RoutesRepo) SyncArgsForCall(i int) []*models.Route {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	argsForCall := fake.syncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *RoutesRepo) Upsert(arg1 *models.Route) {
	fake.upsertMutex.Lock()
	fake.upsertArgsForCall = append(fake.upsertArgsForCall, struct {
		arg1 *models.Route
	}{arg1})
	fake.recordInvocation("Upsert", []interface{}{arg1})
	fake.upsertMutex.Unlock()
	if fake.UpsertStub != nil {
		fake.UpsertStub(arg1)
	}
}

func (fake *RoutesRepo) UpsertCallCount() int {
	fake.upsertMutex.RLock()
	defer fake.upsertMutex.RUnlock()
	return len(fake.upsertArgsForCall)
}

func (fake *RoutesRepo) UpsertCalls(stub func(*models.Route)) {
	fake.upsertMutex.Lock()
	defer fake.upsertMutex.Unlock()
	fake.UpsertStub = stub
}

func (fake *RoutesRepo) UpsertArgsForCall(i int) *models.Route {
	fake.upsertMutex.RLock()
	defer fake.upsertMutex.RUnlock()
	argsForCall := fake.upsertArgsForCall[i]
	return argsForCall.arg1
}

func (fake *RoutesRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	fake.upsertMutex.RLock()
	defer fake.upsertMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RoutesRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
