// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED BY MIXGEN.

syntax = "proto3";



package istio.mixer.adapter.sample.report;


import "gogoproto/gogo.proto";
import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "mixer/adapter/model/v1beta1/report.proto";
import "policy/v1beta1/value_type.proto";
import "policy/v1beta1/type.proto";

option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_REPORT;
option (istio.mixer.adapter.model.v1beta1.template_name) = "report";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// HandleReportService is implemented by backends that wants to handle request-time 'report' instances.
service HandleReportService {
    // HandleReport is called by Mixer at request-time to deliver 'report' instances to the backend.
    rpc HandleReport(HandleReportRequest) returns (istio.mixer.adapter.model.v1beta1.ReportResult);
    
}

// Request message for HandleReport method.
message HandleReportRequest {

    // 'report' instances.
    repeated InstanceMsg instances = 1;

    // Adapter specific handler configuration.
    //
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend]
    // service and therefore opt to receive handler configuration during session creation through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config will have type_url as 'google.protobuf.Any.type_url' and would contain string
    // value of session_id (returned from InfrastructureBackend.CreateSession).
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests from Mixer.
    string dedup_id = 3;
}





// Contains instance payload for 'report' template. This is passed to infrastructure backends during request-time
// through HandleReportService.HandleReport.
message InstanceMsg {

    // Name of the instance as specified in configuration.
    string name = 72295727;
    
    
    istio.policy.v1beta1.Value value = 1;
    
    
    map<string, istio.policy.v1beta1.Value> dimensions = 2;
    
    
    int64 int64Primitive = 3;
    
    
    bool boolPrimitive = 4;
    
    
    double doublePrimitive = 5;
    
    
    string stringPrimitive = 6;
    
    
    map<string, int64> int64Map = 7;
    
    
    istio.policy.v1beta1.TimeStamp timeStamp = 9;
    
    
    istio.policy.v1beta1.Duration duration = 10;
    
    
    Res1Msg res1 = 11;
    
}


message Res1Msg {
    
    
    istio.policy.v1beta1.Value value = 1;
    
    
    map<string, istio.policy.v1beta1.Value> dimensions = 2;
    
    
    int64 int64Primitive = 3;
    
    
    bool boolPrimitive = 4;
    
    
    double doublePrimitive = 5;
    
    
    string stringPrimitive = 6;
    
    
    map<string, int64> int64Map = 7;
    
    
    istio.policy.v1beta1.TimeStamp timeStamp = 9;
    
    
    istio.policy.v1beta1.Duration duration = 10;
    
    
    Res2Msg res2 = 11;
    
    
    map<string, Res2Msg> res2_map = 12;
    
}


message Res2Msg {
    
    
    istio.policy.v1beta1.Value value = 1;
    
    
    map<string, istio.policy.v1beta1.Value> dimensions = 2;
    
    
    int64 int64Primitive = 3;
    
    
    istio.policy.v1beta1.TimeStamp timeStamp = 9;
    
    
    istio.policy.v1beta1.Duration duration = 10;
    
    
    istio.policy.v1beta1.IPAddress ip_addr = 11;
    
    
    istio.policy.v1beta1.DNSName dns_name = 12;
    
    
    istio.policy.v1beta1.EmailAddress email_addr = 13;
    
    
    istio.policy.v1beta1.Uri uri = 14;
    
}

// Contains inferred type information about specific instance of 'report' template. This is passed to
// infrastructure backends during configuration-time through [InfrastructureBackend.CreateSession][TODO: Link to this fragment].
message Type {
    
    
    istio.policy.v1beta1.ValueType value = 1;
    
    
    map<string, istio.policy.v1beta1.ValueType> dimensions = 2;
    
    
    Res1Type res1 = 11;
    
}


message Res1Type {
    
    
    istio.policy.v1beta1.ValueType value = 1;
    
    
    map<string, istio.policy.v1beta1.ValueType> dimensions = 2;
    
    
    Res2Type res2 = 11;
    
    
    map<string, Res2Type> res2_map = 12;
    
}


message Res2Type {
    
    
    istio.policy.v1beta1.ValueType value = 1;
    
    
    map<string, istio.policy.v1beta1.ValueType> dimensions = 2;
    
}


// Represents instance configuration schema for 'report' template.
message InstanceParam {
    
    
    string value = 1;
    
    
    map<string, string> dimensions = 2;
    
    
    string int64Primitive = 3;
    
    
    string boolPrimitive = 4;
    
    
    string doublePrimitive = 5;
    
    
    string stringPrimitive = 6;
    
    
    map<string, string> int64Map = 7;
    
    
    string timeStamp = 9;
    
    
    string duration = 10;
    
    
    Res1InstanceParam res1 = 11;
    
}


message Res1InstanceParam {
    
    
    string value = 1;
    
    
    map<string, string> dimensions = 2;
    
    
    string int64Primitive = 3;
    
    
    string boolPrimitive = 4;
    
    
    string doublePrimitive = 5;
    
    
    string stringPrimitive = 6;
    
    
    map<string, string> int64Map = 7;
    
    
    string timeStamp = 9;
    
    
    string duration = 10;
    
    
    Res2InstanceParam res2 = 11;
    
    
    map<string, Res2InstanceParam> res2_map = 12;
    
}


message Res2InstanceParam {
    
    
    string value = 1;
    
    
    map<string, string> dimensions = 2;
    
    
    string int64Primitive = 3;
    
    
    string timeStamp = 9;
    
    
    string duration = 10;
    
    
    string ip_addr = 11;
    
    
    string dns_name = 12;
    
    
    string email_addr = 13;
    
    
    string uri = 14;
    
}

