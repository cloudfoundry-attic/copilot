{{- if .Values.global.k8sIngress.enabled }}
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: istio-autogenerated-k8s-ingress
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    istio: {{ .Values.global.k8sIngress.gatewayName }}
  servers:
  - port:
      number: 80
      protocol: HTTP2
      name: http
    hosts:
    - "*"
{{ if .Values.global.k8sIngress.enableHttps }}
  - port:
      number: 443
      protocol: HTTPS
      name: https-default
    tls:
      mode: SIMPLE
      serverCertificate: /etc/istio/ingress-certs/tls.crt
      privateKey: /etc/istio/ingress-certs/tls.key
    hosts:
    - "*"
{{ end }}    
---    
{{ end }}

{{- if .Values.global.meshExpansion.enabled }}
{{- if .Values.global.meshExpansion.useILB }}
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: meshexpansion-ilb-gateway
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    istio: ilbgateway
  servers:
  - port:
      number: 15011
      protocol: TCP
      name: tcp-pilot
    hosts:
    - "*"
  - port:
      number: 8060
      protocol: TCP
      name: tcp-citadel
    hosts:
    - "*"
---
{{- else }}
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: meshexpansion-gateway
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 15011
      protocol: TCP
      name: tcp-pilot
    hosts:
    - "*"
  - port:
      number: 8060
      protocol: TCP
      name: tcp-citadel
    hosts:
    - "*"
---
{{- end }}
{{- end }}

{{- if .Values.global.multiCluster.connectUsingGateway }}
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: istio-multicluster-gateway
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    istio: mcgateway
  servers:
  - hosts:
    # This is a dummy port to keep AWS LB happy.
    # DO NOT REMOVE.
    - "*.local"
    port:
      name: http
      number: 80
      protocol: HTTP
  - hosts:
    - "*.local"
    port:
      name: tls
      number: 15443
      protocol: TLS
    tls: {}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: istio-multicluster-virtualservice
  namespace: {{ .Release.Namespace }}
spec:
  gateways:
  - istio-multicluster-gateway
  hosts:
  - "*.local"
  http: #black hole all port 80 traffic.
  - match:
    - port: 80
    route:
    - destination:
        host: non.existent.cluster
      weight: 100
  # We need a TLS block to setup the filter chain
  # The actual routing happens using the SNI filter
  tls:
  - match:
    - port: 15443
      sniHosts:
      - "*.local"
    route:
    - destination:        
        host: non.existent.cluster
        port:
          number: 15443
      weight: 100
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: istio-multicluster-envoy-filter
  namespace: {{ .Release.Namespace }}
spec:
   workloadLabels:
     istio: mcgateway
   filters:
   - listenerMatch:
       portNumber: 15443
       listenerType: GATEWAY
     filterName: envoy.filters.network.sni_cluster
     filterType: NETWORK
     filterConfig: {}
---
{{- end }}
