# Authentication policy to enable mutual TLS for all services (that have sidecar) in the mesh.
apiVersion: authentication.istio.io/v1alpha1
kind: MeshPolicy
metadata:
  name: default
  namespace: istio-config
spec:
  peers:
  - mtls: {}
---
# Corresponding destination rule to configure client side to use mutual TLS when talking to
# any service (host) in the mesh.
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: default
  namespace: istio-config
spec:
  host: "*.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---
# Service entries for istio-policy and telemetry
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: istio-telemetry
  namespace: istio-system
spec:
  hosts:
  - istio-telemetry.istio-system.svc.cluster.local
  addresses:
  - 1.1.1.1
  ports:
  - number: 15004
    name: mtls
    protocol: TCP
  location: MESH_INTERNAL
  resolution: DNS
  exportTo:
  - '*'
---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: istio-policy
  namespace: istio-system
spec:
  hosts:
  - istio-policy.istio-system.svc.cluster.local
  addresses:
  - 1.1.1.2
  ports:
  - number: 15004
    name: mtls
    protocol: TCP
  location: MESH_INTERNAL
  resolution: DNS
  exportTo:
  - '*'
---
# Services and configs in ns1 namespace
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: http1
  namespace: ns1
spec:
  hosts:
    - http1.ns1.svc.cluster.local
  addresses:
    - 2.1.1.1
  ports:
    - number: 8081
      name: http
      protocol: HTTP2
  location: MESH_INTERNAL
  resolution: STATIC
  endpoints:
    - address: 100.1.1.1
      labels:
        version: v1
      ports:
        http: 8080
---
# The sidecar for the consumer only application
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: test-lua
  #namespace: sr-test
spec:
  workloadLabels:
    app: envoyfilter-test-app
  filters:
    - listenerMatch:
        listenerType: SIDECAR_OUTBOUND
        listenerProtocol: HTTP
      filterName: envoy.lua
      filterType: HTTP
      filterConfig:
        inlineCode: |
          function envoy_on_request(request_handle)
            request_handle:logWarn("Hello World")
          end