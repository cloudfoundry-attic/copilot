version: 2

# Docker environment.
defaults: &defaults
  working_directory: /go/src/istio.io/istio
  docker:
    - image: gcr.io/istio-testing/circleci:2019-04-22
  environment:
    GOPATH: /go
    SKIP_CLEANUP: true

# org context settings. If developing on a clone, please configure:

# DOCKER_USER
# DOCKER_PASS
# HUB: ex istio, costinm (it is not the hub, but the dockerhub org or user)

# VM environment. Includes docker.
integrationDefaults: &integrationDefaults
  machine: true
  working_directory: /go/src/istio.io/istio #same as docker
  environment:
    - CHANGE_MINIKUBE_NONE_USER: true
    - GOPATH: /go
    - SKIP_CLEANUP: true
    - KUBECONFIG: /go/out/minikube.conf
    - TEST_ENV: minikube-none

# Common procedure to initialize working directory
initWorkingDir: &initWorkingDir
  type: shell
  name: Initialize Working Directory
  pwd: /
  command: |
    sudo mkdir -p /go/src/istio.io/istio
    sudo chown -R circleci /go
    mkdir -p /go/out/tests
    mkdir -p /go/out/logs
    mkdir -p /home/circleci/logs
    # TODO - temporary until 'machine' image is updated or customized
    GOROOT=$(go env GOROOT)
    sudo rm -r $(go env GOROOT)
    sudo mkdir $GOROOT
    curl https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz | sudo tar xz -C $GOROOT --strip-components=1

recordZeroExitCodeIfTestPassed: &recordZeroExitCodeIfTestPassed
  run:
    when: on_success
    name: Record zero exit code as test passed
    command: echo 0 > exit_code

recordNonzeroExitCodeIfTestFailed: &recordNonzeroExitCodeIfTestFailed
  run:
    when: on_fail
    name: Record nonzero exit code as test failed
    command: echo 1 > exit_code

markJobStartsOnGCS: &markJobStartsOnGCS
  run:
    when: always
    command: bin/ci2gubernator.sh --job_starts

markJobFinishesOnGCS: &markJobFinishesOnGCS
  run:
    when: always
    command: |
      make junit-report || true
      # TODO: upload the artifacts as well, for debugging !
      bin/ci2gubernator.sh --exit_code=$(cat exit_code) --junit_xml=/go/out/tests/junit.xml
      make dumpsys || true

jobs:
  # e2e-simple:
  #   <<: *integrationDefaults
  #   environment:
  #           - KUBECONFIG: /go/out/minikube.conf
  #           - TEST_ENV: minikube-none
  #           - GOPATH: /go
  #   steps:
  #     - <<: *initWorkingDir
  #     - checkout
  #     - attach_workspace:
  #         at:  /go
  #     - <<: *markJobStartsOnGCS
  #     - run: make sync
  #     - run: bin/testEnvRootMinikube.sh start
  #     - run:
  #         command: |
  #           if [ ! -f /go/out/linux_amd64/release/pilot-discovery ]; then
  #             # Should only happen when re-running a job, and the workspace is gone
  #             time make build test-bins
  #           fi
  #           make docker.all
  #     - run: bin/testEnvRootMinikube.sh wait
  #     - run: docker images
  #     - run: make test/local/auth/e2e_simple
  #     - <<: *recordZeroExitCodeIfTestPassed
  #     - <<: *recordNonzeroExitCodeIfTestFailed
  #     - <<: *markJobFinishesOnGCS
  #     - store_artifacts:
  #         path: /home/circleci/logs
  #     - store_artifacts:
  #         path: /tmp
  #     - store_artifacts:
  #         path: /var/lib/localkube/
  #     - store_test_results:
  #         path: /go/out/tests

  # e2e-dashboard:
  #   <<: *integrationDefaults
  #   environment:
  #           - KUBECONFIG: /go/out/minikube.conf
  #           - TEST_ENV: minikube-none
  #           - GOPATH: /go
  #   steps:
  #     - <<: *initWorkingDir
  #     - checkout
  #     - attach_workspace:
  #         at:  /go
  #     - <<: *markJobStartsOnGCS
  #     - run: make sync
  #     - run: bin/testEnvRootMinikube.sh start
  #     - run:
  #         command: |
  #           if [ ! -f /go/out/linux_amd64/release/pilot-discovery ]; then
  #             # Should only happen when re-running a job, and the workspace is gone
  #             time make build test-bins
  #           fi
  #           make docker.all generate_e2e_yaml
  #     - run: bin/testEnvRootMinikube.sh wait
  #     - run: docker images
  #     - run:
  #         command: |
  #           PATH=$GOPATH/bin:$PATH \
  #           E2E_ARGS="--skip_cleanup -use_local_cluster -test.v" \
  #           set -o pipefail
  #           make e2e_dashboard | tee -a /go/out/tests/build-log.txt
  #     - <<: *recordZeroExitCodeIfTestPassed
  #     - <<: *recordNonzeroExitCodeIfTestFailed
  #     - <<: *markJobFinishesOnGCS
  #     - store_artifacts:
  #         path: /home/circleci/logs
  #     - store_artifacts:
  #         path: /tmp
  #     - store_artifacts:
  #         path: /var/lib/localkube/

  # e2e-mixer-noauth-v1alpha3-v2:
  #   <<: *integrationDefaults
  #   steps:
  #     - <<: *initWorkingDir
  #     - checkout
  #     - attach_workspace:
  #         at:  /go
  #     - <<: *markJobStartsOnGCS
  #     - run: make sync
  #     - run: bin/testEnvRootMinikube.sh start
  #     - run:
  #         command: |
  #           if [ ! -f /go/out/linux_amd64/release/pilot-discovery ]; then
  #             # Should only happen when re-running a job, and the workspace is gone
  #             time make build test-bins
  #           fi
  #           make docker.all generate_e2e_yaml
  #     - run: bin/testEnvRootMinikube.sh wait
  #     - run: docker images
  #     - run:
  #         no_output_timeout: 20m
  #         name: make e2e_mixer
  #         command: |
  #           make test/local/noauth/e2e_mixer_envoyv2
  #     - <<: *recordZeroExitCodeIfTestPassed
  #     - <<: *recordNonzeroExitCodeIfTestFailed
  #     - <<: *markJobFinishesOnGCS
  #     - store_artifacts:
  #         path: /home/circleci/logs
  #     - store_artifacts:
  #         path: /tmp
  #     - store_test_results:
  #         path: /go/out/tests

  e2e-galley:
    <<: *integrationDefaults
    environment:
            - KUBECONFIG: /go/out/minikube.conf
            - TEST_ENV: minikube-none
            - GOPATH: /go
    steps:
      - <<: *initWorkingDir
      - checkout
      - attach_workspace:
          at:  /go
      - <<: *markJobStartsOnGCS
      - run: make sync
      - run: bin/testEnvRootMinikube.sh start
      - run:
          command: |
            if [ ! -f /go/out/linux_amd64/release/pilot-discovery ]; then
              # Should only happen when re-running a job, and the workspace is gone
              time make build test-bins
            fi
            make docker.all generate_e2e_yaml
      - run: bin/testEnvRootMinikube.sh wait
      - run: docker images
      - run:
          no_output_timeout: 20m
          name: make e2e_galley
          command: |
            make test/local/e2e_galley
      - <<: *recordZeroExitCodeIfTestPassed
      - <<: *recordNonzeroExitCodeIfTestFailed
      - <<: *markJobFinishesOnGCS
      - store_artifacts:
          path: /home/circleci/logs
      - store_artifacts:
          path: /tmp
      - store_test_results:
          path: /go/out/tests

  e2e-pilot-cloudfoundry-v1alpha3-v2:
    <<: *integrationDefaults
    steps:
      - <<: *initWorkingDir
      - checkout
      - attach_workspace:
          at: /go
      - run: make sync
      - run:
          no_output_timeout: 20m
          command: |
            export PATH=$GOPATH/bin:$PATH
            make localTestEnv
            make test/local/cloudfoundry/e2e_pilotv2
      - <<: *recordZeroExitCodeIfTestPassed
      - <<: *recordNonzeroExitCodeIfTestFailed
      - <<: *markJobFinishesOnGCS
      - store_artifacts:
          path: /go/out/logs
      - store_artifacts:
          path: /tmp

  e2e-pilot-noauth-v1alpha3-v2:
    <<: *integrationDefaults
    environment:
            - GOPATH: /go
            - KUBECONFIG: /go/out/minikube.conf
            - TEST_ENV: minikube-none
    steps:
      - <<: *initWorkingDir
      - checkout
      - attach_workspace:
          at:  /go
      - <<: *markJobStartsOnGCS
      - run: make sync
      - run: bin/testEnvRootMinikube.sh start
      - run:
          command: |
            if [ ! -f /go/out/linux_amd64/release/pilot-discovery ]; then
              # Should only happen when re-running a job, and the workspace is gone
              time make build test-bins
            fi
            make docker.all generate_e2e_yaml
      - run: bin/testEnvRootMinikube.sh wait
      - run: docker images
      - run:
          no_output_timeout: 20m
          command: |
                make test/local/noauth/e2e_pilotv2
      - <<: *recordZeroExitCodeIfTestPassed
      - <<: *recordNonzeroExitCodeIfTestFailed
      - <<: *markJobFinishesOnGCS
      - store_test_results:
          path: /go/out/tests
      - store_artifacts:
          path: /go/out/logs
      - store_artifacts:
          path: /tmp

  # e2e-pilot-auth-v1alpha3-v2:
  #   <<: *integrationDefaults
  #   steps:
  #     - <<: *initWorkingDir
  #     - checkout
  #     - attach_workspace:
  #         at:  /go
  #     - <<: *markJobStartsOnGCS
  #     - run: make sync
  #     - run: bin/testEnvRootMinikube.sh start
  #     - run:
  #         command: |
  #           if [ ! -f /go/out/linux_amd64/release/pilot-discovery ]; then
  #             # Should only happen when re-running a job, and the workspace is gone
  #             time make build test-bins
  #           fi
  #           make docker.all generate_e2e_yaml
  #     - run: bin/testEnvRootMinikube.sh wait
  #     - run: docker images
  #     - run:
  #         no_output_timeout: 20m
  #         command: |
  #               make test/local/auth/e2e_pilotv2
  #     - <<: *recordZeroExitCodeIfTestPassed
  #     - <<: *recordNonzeroExitCodeIfTestFailed
  #     - <<: *markJobFinishesOnGCS
  #     - store_test_results:
  #         path: /go/out/tests
  #     - store_artifacts:
  #         path: /go/out/logs
  #     - store_artifacts:
  #         path: /tmp

  codecov:
    <<: *defaults
    resource_class: xlarge
    environment:
      KUBECONFIG: /go/src/istio.io/istio/.circleci/config
      ISTIO_BIN: /go/bin
    steps:
      - checkout
      - <<: *markJobStartsOnGCS
      - run: make init
      - run: make build test-bins /go/bin/go-junit-report
      - run:
          name: Starting Kubernetes API Server standalone and running tests
          command: |
            cd /go/src/istio.io/istio
            MAXPROCS=6 bin/codecov_diff.sh
      - <<: *recordZeroExitCodeIfTestPassed
      - <<: *recordNonzeroExitCodeIfTestFailed
      - run:
          name: markJobFinishesOnGCS
          when: always
          command: |
            bin/ci2gubernator.sh --exit_code=$(cat exit_code) --junit_xml=/go/out/tests/junit.xml
      - store_artifacts:
          path: /go/out/codecov
      - store_artifacts:
          path: /go/out/tests
      - store_test_results:
          path: /go/out/tests

  test:
    <<: *defaults
    environment:
      KUBECONFIG: /go/src/istio.io/istio/.circleci/config
    resource_class: xlarge
    steps:
      - checkout
      - <<: *markJobStartsOnGCS
      - run: make sync
      - run:
          command: |
            mkdir -p /go/out/tests
            export PATH=$GOPATH/bin:$PATH
            make localTestEnv
            set -o pipefail
            make test T=-v | tee -a /go/out/tests/build-log.txt
      - <<: *recordZeroExitCodeIfTestPassed
      - <<: *recordNonzeroExitCodeIfTestFailed
      - <<: *markJobFinishesOnGCS
      - store_test_results:
          path: /go/out/tests

  racetest:
    <<: *defaults
    environment:
      KUBECONFIG: /go/src/istio.io/istio/.circleci/config
      RACE_TEST: 1
    resource_class: xlarge
    steps:
      - checkout
      - <<: *markJobStartsOnGCS
      - run: make sync
      - run:
          command: |
            mkdir -p /go/out/tests
            trap "go-junit-report </go/out/tests/build-log.txt > /go/out/tests/junit.xml" EXIT
            make localTestEnv
            set -o pipefail
            make -k pilot-racetest mixer-racetest security-racetest T=-v | tee -a /go/out/tests/build-log.txt
      - <<: *recordZeroExitCodeIfTestPassed
      - <<: *recordNonzeroExitCodeIfTestFailed
      - <<: *markJobFinishesOnGCS
      - store_test_results:
          path: /go/out/tests

  build:
    <<: *defaults
    resource_class: xlarge
    steps:
      - checkout
      - run: make sync
      - run: make build test-bins /go/bin/go-junit-report
      - persist_to_workspace:
          root: /go
          paths:
            - pkg/linux_amd64
            - bin
            - out
      - run:  make sidecar.deb
      - store_artifacts:
          path: /go/out/istio-sidecar.deb

  shellcheck:
    docker:
      - image: koalaman/shellcheck-alpine:v0.6.0
    steps:
      - checkout
      - run:
          name: Check Scripts
          command: /root/project/bin/check_shell_scripts.sh

  lint:
    <<: *defaults
    environment:
      KUBECONFIG: /go/src/istio.io/istio/.circleci/config
    resource_class: xlarge
    steps:
      - checkout
      - run: make sync
      - run: make lint
# TODO: https://github.com/istio/istio/issues/7861
# We can re-enable this after it runs for 1 week straight as a non-required gate, and by consulting with the
# test-infra team.
#      - run:
#          name: Check Scripts
#          command: /go/src/istio.io/istio/bin/check_shell_scripts.sh


  # This job is triggered via API. expect env vars
  # DOCKER_USER, DOCKER_PASS, HUB, TAG
  dockerpush:
    <<: *defaults
    resource_class: xlarge
    steps:
      - checkout
      - run: make sync
      - run: make build
      - setup_remote_docker:
          docker_layer_caching: true
      - run: make docker.all
      - run: docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
      - run: make push

workflows:
  version: 2
  all:
    jobs:
      - shellcheck
      - lint
      - build
      - test
      - codecov
      # - e2e-mixer-noauth-v1alpha3-v2:
      #     requires:
      #       - build
      # - e2e-galley:
      #     requires:
      #       - build
      # - e2e-simple:
      #     requires:
      #       - build
      # - e2e-dashboard:
      #     requires:
      #       - build
      - racetest:
          requires:
            - test
      # - e2e-pilot-auth-v1alpha3-v2: # auth+v1alpha3+v2
      #     requires:
      #       - build
      - e2e-pilot-noauth-v1alpha3-v2: # noauth+v1alpha3+v2
          requires:
            - build
      - e2e-pilot-cloudfoundry-v1alpha3-v2:
          requires:
            - build
      # - e2e-pilot-auth-v1alpha3-v2-non-mcp: # auth+v1alpha3+v2 without MCP
      #     requires:
      #       - build

