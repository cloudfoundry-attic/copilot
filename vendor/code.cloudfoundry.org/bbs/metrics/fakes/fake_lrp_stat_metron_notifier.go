// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"os"
	"sync"
	"time"

	"code.cloudfoundry.org/bbs/metrics"
)

type FakeLRPStatMetronNotifier struct {
	RunStub        func(signals <-chan os.Signal, ready chan<- struct{}) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		signals <-chan os.Signal
		ready   chan<- struct{}
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	RecordFreshDomainsStub        func(domains []string)
	recordFreshDomainsMutex       sync.RWMutex
	recordFreshDomainsArgsForCall []struct {
		domains []string
	}
	RecordConvergenceDurationStub        func(duration time.Duration)
	recordConvergenceDurationMutex       sync.RWMutex
	recordConvergenceDurationArgsForCall []struct {
		duration time.Duration
	}
	RecordLRPCountsStub        func(unclaimed, claimed, running, crashed, missing, extra, suspectRunning, suspectClaimed, desired, crashingDesired int)
	recordLRPCountsMutex       sync.RWMutex
	recordLRPCountsArgsForCall []struct {
		unclaimed       int
		claimed         int
		running         int
		crashed         int
		missing         int
		extra           int
		suspectRunning  int
		suspectClaimed  int
		desired         int
		crashingDesired int
	}
	RecordCellCountsStub        func(present, suspect int)
	recordCellCountsMutex       sync.RWMutex
	recordCellCountsArgsForCall []struct {
		present int
		suspect int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLRPStatMetronNotifier) Run(signals <-chan os.Signal, ready chan<- struct{}) error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		signals <-chan os.Signal
		ready   chan<- struct{}
	}{signals, ready})
	fake.recordInvocation("Run", []interface{}{signals, ready})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(signals, ready)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.runReturns.result1
}

func (fake *FakeLRPStatMetronNotifier) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeLRPStatMetronNotifier) RunArgsForCall(i int) (<-chan os.Signal, chan<- struct{}) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].signals, fake.runArgsForCall[i].ready
}

func (fake *FakeLRPStatMetronNotifier) RunReturns(result1 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLRPStatMetronNotifier) RunReturnsOnCall(i int, result1 error) {
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLRPStatMetronNotifier) RecordFreshDomains(domains []string) {
	var domainsCopy []string
	if domains != nil {
		domainsCopy = make([]string, len(domains))
		copy(domainsCopy, domains)
	}
	fake.recordFreshDomainsMutex.Lock()
	fake.recordFreshDomainsArgsForCall = append(fake.recordFreshDomainsArgsForCall, struct {
		domains []string
	}{domainsCopy})
	fake.recordInvocation("RecordFreshDomains", []interface{}{domainsCopy})
	fake.recordFreshDomainsMutex.Unlock()
	if fake.RecordFreshDomainsStub != nil {
		fake.RecordFreshDomainsStub(domains)
	}
}

func (fake *FakeLRPStatMetronNotifier) RecordFreshDomainsCallCount() int {
	fake.recordFreshDomainsMutex.RLock()
	defer fake.recordFreshDomainsMutex.RUnlock()
	return len(fake.recordFreshDomainsArgsForCall)
}

func (fake *FakeLRPStatMetronNotifier) RecordFreshDomainsArgsForCall(i int) []string {
	fake.recordFreshDomainsMutex.RLock()
	defer fake.recordFreshDomainsMutex.RUnlock()
	return fake.recordFreshDomainsArgsForCall[i].domains
}

func (fake *FakeLRPStatMetronNotifier) RecordConvergenceDuration(duration time.Duration) {
	fake.recordConvergenceDurationMutex.Lock()
	fake.recordConvergenceDurationArgsForCall = append(fake.recordConvergenceDurationArgsForCall, struct {
		duration time.Duration
	}{duration})
	fake.recordInvocation("RecordConvergenceDuration", []interface{}{duration})
	fake.recordConvergenceDurationMutex.Unlock()
	if fake.RecordConvergenceDurationStub != nil {
		fake.RecordConvergenceDurationStub(duration)
	}
}

func (fake *FakeLRPStatMetronNotifier) RecordConvergenceDurationCallCount() int {
	fake.recordConvergenceDurationMutex.RLock()
	defer fake.recordConvergenceDurationMutex.RUnlock()
	return len(fake.recordConvergenceDurationArgsForCall)
}

func (fake *FakeLRPStatMetronNotifier) RecordConvergenceDurationArgsForCall(i int) time.Duration {
	fake.recordConvergenceDurationMutex.RLock()
	defer fake.recordConvergenceDurationMutex.RUnlock()
	return fake.recordConvergenceDurationArgsForCall[i].duration
}

func (fake *FakeLRPStatMetronNotifier) RecordLRPCounts(unclaimed int, claimed int, running int, crashed int, missing int, extra int, suspectRunning int, suspectClaimed int, desired int, crashingDesired int) {
	fake.recordLRPCountsMutex.Lock()
	fake.recordLRPCountsArgsForCall = append(fake.recordLRPCountsArgsForCall, struct {
		unclaimed       int
		claimed         int
		running         int
		crashed         int
		missing         int
		extra           int
		suspectRunning  int
		suspectClaimed  int
		desired         int
		crashingDesired int
	}{unclaimed, claimed, running, crashed, missing, extra, suspectRunning, suspectClaimed, desired, crashingDesired})
	fake.recordInvocation("RecordLRPCounts", []interface{}{unclaimed, claimed, running, crashed, missing, extra, suspectRunning, suspectClaimed, desired, crashingDesired})
	fake.recordLRPCountsMutex.Unlock()
	if fake.RecordLRPCountsStub != nil {
		fake.RecordLRPCountsStub(unclaimed, claimed, running, crashed, missing, extra, suspectRunning, suspectClaimed, desired, crashingDesired)
	}
}

func (fake *FakeLRPStatMetronNotifier) RecordLRPCountsCallCount() int {
	fake.recordLRPCountsMutex.RLock()
	defer fake.recordLRPCountsMutex.RUnlock()
	return len(fake.recordLRPCountsArgsForCall)
}

func (fake *FakeLRPStatMetronNotifier) RecordLRPCountsArgsForCall(i int) (int, int, int, int, int, int, int, int, int, int) {
	fake.recordLRPCountsMutex.RLock()
	defer fake.recordLRPCountsMutex.RUnlock()
	return fake.recordLRPCountsArgsForCall[i].unclaimed, fake.recordLRPCountsArgsForCall[i].claimed, fake.recordLRPCountsArgsForCall[i].running, fake.recordLRPCountsArgsForCall[i].crashed, fake.recordLRPCountsArgsForCall[i].missing, fake.recordLRPCountsArgsForCall[i].extra, fake.recordLRPCountsArgsForCall[i].suspectRunning, fake.recordLRPCountsArgsForCall[i].suspectClaimed, fake.recordLRPCountsArgsForCall[i].desired, fake.recordLRPCountsArgsForCall[i].crashingDesired
}

func (fake *FakeLRPStatMetronNotifier) RecordCellCounts(present int, suspect int) {
	fake.recordCellCountsMutex.Lock()
	fake.recordCellCountsArgsForCall = append(fake.recordCellCountsArgsForCall, struct {
		present int
		suspect int
	}{present, suspect})
	fake.recordInvocation("RecordCellCounts", []interface{}{present, suspect})
	fake.recordCellCountsMutex.Unlock()
	if fake.RecordCellCountsStub != nil {
		fake.RecordCellCountsStub(present, suspect)
	}
}

func (fake *FakeLRPStatMetronNotifier) RecordCellCountsCallCount() int {
	fake.recordCellCountsMutex.RLock()
	defer fake.recordCellCountsMutex.RUnlock()
	return len(fake.recordCellCountsArgsForCall)
}

func (fake *FakeLRPStatMetronNotifier) RecordCellCountsArgsForCall(i int) (int, int) {
	fake.recordCellCountsMutex.RLock()
	defer fake.recordCellCountsMutex.RUnlock()
	return fake.recordCellCountsArgsForCall[i].present, fake.recordCellCountsArgsForCall[i].suspect
}

func (fake *FakeLRPStatMetronNotifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.recordFreshDomainsMutex.RLock()
	defer fake.recordFreshDomainsMutex.RUnlock()
	fake.recordConvergenceDurationMutex.RLock()
	defer fake.recordConvergenceDurationMutex.RUnlock()
	fake.recordLRPCountsMutex.RLock()
	defer fake.recordLRPCountsMutex.RUnlock()
	fake.recordCellCountsMutex.RLock()
	defer fake.recordCellCountsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLRPStatMetronNotifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.LRPStatMetronNotifier = new(FakeLRPStatMetronNotifier)
