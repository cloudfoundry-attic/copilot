// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"code.cloudfoundry.org/bbs/db"
	"code.cloudfoundry.org/bbs/models"
	"code.cloudfoundry.org/lager"
)

type FakeSuspectDB struct {
	RemoveSuspectActualLRPStub        func(lager.Logger, *models.ActualLRPKey) (*models.ActualLRP, error)
	removeSuspectActualLRPMutex       sync.RWMutex
	removeSuspectActualLRPArgsForCall []struct {
		arg1 lager.Logger
		arg2 *models.ActualLRPKey
	}
	removeSuspectActualLRPReturns struct {
		result1 *models.ActualLRP
		result2 error
	}
	removeSuspectActualLRPReturnsOnCall map[int]struct {
		result1 *models.ActualLRP
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSuspectDB) RemoveSuspectActualLRP(arg1 lager.Logger, arg2 *models.ActualLRPKey) (*models.ActualLRP, error) {
	fake.removeSuspectActualLRPMutex.Lock()
	ret, specificReturn := fake.removeSuspectActualLRPReturnsOnCall[len(fake.removeSuspectActualLRPArgsForCall)]
	fake.removeSuspectActualLRPArgsForCall = append(fake.removeSuspectActualLRPArgsForCall, struct {
		arg1 lager.Logger
		arg2 *models.ActualLRPKey
	}{arg1, arg2})
	fake.recordInvocation("RemoveSuspectActualLRP", []interface{}{arg1, arg2})
	fake.removeSuspectActualLRPMutex.Unlock()
	if fake.RemoveSuspectActualLRPStub != nil {
		return fake.RemoveSuspectActualLRPStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.removeSuspectActualLRPReturns.result1, fake.removeSuspectActualLRPReturns.result2
}

func (fake *FakeSuspectDB) RemoveSuspectActualLRPCallCount() int {
	fake.removeSuspectActualLRPMutex.RLock()
	defer fake.removeSuspectActualLRPMutex.RUnlock()
	return len(fake.removeSuspectActualLRPArgsForCall)
}

func (fake *FakeSuspectDB) RemoveSuspectActualLRPArgsForCall(i int) (lager.Logger, *models.ActualLRPKey) {
	fake.removeSuspectActualLRPMutex.RLock()
	defer fake.removeSuspectActualLRPMutex.RUnlock()
	return fake.removeSuspectActualLRPArgsForCall[i].arg1, fake.removeSuspectActualLRPArgsForCall[i].arg2
}

func (fake *FakeSuspectDB) RemoveSuspectActualLRPReturns(result1 *models.ActualLRP, result2 error) {
	fake.RemoveSuspectActualLRPStub = nil
	fake.removeSuspectActualLRPReturns = struct {
		result1 *models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeSuspectDB) RemoveSuspectActualLRPReturnsOnCall(i int, result1 *models.ActualLRP, result2 error) {
	fake.RemoveSuspectActualLRPStub = nil
	if fake.removeSuspectActualLRPReturnsOnCall == nil {
		fake.removeSuspectActualLRPReturnsOnCall = make(map[int]struct {
			result1 *models.ActualLRP
			result2 error
		})
	}
	fake.removeSuspectActualLRPReturnsOnCall[i] = struct {
		result1 *models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeSuspectDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.removeSuspectActualLRPMutex.RLock()
	defer fake.removeSuspectActualLRPMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSuspectDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.SuspectDB = new(FakeSuspectDB)
